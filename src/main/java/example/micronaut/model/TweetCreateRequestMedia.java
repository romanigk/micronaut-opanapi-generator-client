/*
 * Twitter API v2
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.55
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package example.micronaut.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.util.ArrayList;
import java.util.List;
import com.fasterxml.jackson.annotation.*;

import javax.validation.constraints.*;
import javax.validation.Valid;
import io.micronaut.core.annotation.*;
import javax.annotation.Generated;

/**
 * Media information being attached to created Tweet. This is mutually exclusive from Quote Tweet Id, Poll, and Card URI.
 */
@JsonPropertyOrder({
  TweetCreateRequestMedia.JSON_PROPERTY_MEDIA_IDS,
  TweetCreateRequestMedia.JSON_PROPERTY_TAGGED_USER_IDS
})
@JsonTypeName("TweetCreateRequest_media")
@Generated(value="org.openapitools.codegen.languages.JavaMicronautClientCodegen", date="2022-11-05T03:44:30.749524299+01:00[Europe/Berlin]")
@Introspected
public class TweetCreateRequestMedia {
    public static final String JSON_PROPERTY_MEDIA_IDS = "media_ids";
    private List<String> mediaIds = new ArrayList<>();

    public static final String JSON_PROPERTY_TAGGED_USER_IDS = "tagged_user_ids";
    private List<String> taggedUserIds = null;

    public TweetCreateRequestMedia(List<String> mediaIds) {
        this.mediaIds = mediaIds;
    }

    public TweetCreateRequestMedia mediaIds(List<String> mediaIds) {
        this.mediaIds = mediaIds;
        return this;
    }

    public TweetCreateRequestMedia addMediaIdsItem(String mediaIdsItem) {
        this.mediaIds.add(mediaIdsItem);
        return this;
    }

    /**
     * A list of Media Ids to be attached to a created Tweet.
     * @return mediaIds
     **/
    @NotNull
    @Size(min=1, max=4)
    @JsonProperty(JSON_PROPERTY_MEDIA_IDS)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public List<String> getMediaIds() {
        return mediaIds;
    }

    @JsonProperty(JSON_PROPERTY_MEDIA_IDS)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setMediaIds(List<String> mediaIds) {
        this.mediaIds = mediaIds;
    }

    public TweetCreateRequestMedia taggedUserIds(List<String> taggedUserIds) {
        this.taggedUserIds = taggedUserIds;
        return this;
    }

    public TweetCreateRequestMedia addTaggedUserIdsItem(String taggedUserIdsItem) {
        if (this.taggedUserIds == null) {
            this.taggedUserIds = new ArrayList<>();
        }
        this.taggedUserIds.add(taggedUserIdsItem);
        return this;
    }

    /**
     * A list of User Ids to be tagged in the media for created Tweet.
     * @return taggedUserIds
     **/
    @Nullable
    @Size(min=0, max=10)
    @JsonProperty(JSON_PROPERTY_TAGGED_USER_IDS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public List<String> getTaggedUserIds() {
        return taggedUserIds;
    }

    @JsonProperty(JSON_PROPERTY_TAGGED_USER_IDS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setTaggedUserIds(List<String> taggedUserIds) {
        this.taggedUserIds = taggedUserIds;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        TweetCreateRequestMedia tweetCreateRequestMedia = (TweetCreateRequestMedia) o;
        return Objects.equals(this.mediaIds, tweetCreateRequestMedia.mediaIds) &&
            Objects.equals(this.taggedUserIds, tweetCreateRequestMedia.taggedUserIds);
    }

    @Override
    public int hashCode() {
        return Objects.hash(mediaIds, taggedUserIds);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class TweetCreateRequestMedia {\n");
        sb.append("    mediaIds: ").append(toIndentedString(mediaIds)).append("\n");
        sb.append("    taggedUserIds: ").append(toIndentedString(taggedUserIds)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

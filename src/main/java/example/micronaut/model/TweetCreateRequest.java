/*
 * Twitter API v2
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.55
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package example.micronaut.model;

import java.util.Objects;
import java.util.Arrays;
import example.micronaut.model.TweetCreateRequestGeo;
import example.micronaut.model.TweetCreateRequestMedia;
import example.micronaut.model.TweetCreateRequestPoll;
import example.micronaut.model.TweetCreateRequestReply;
import com.fasterxml.jackson.annotation.*;

import javax.validation.constraints.*;
import javax.validation.Valid;
import io.micronaut.core.annotation.*;
import javax.annotation.Generated;

/**
 * TweetCreateRequest
 */
@JsonPropertyOrder({
  TweetCreateRequest.JSON_PROPERTY_CARD_URI,
  TweetCreateRequest.JSON_PROPERTY_DIRECT_MESSAGE_DEEP_LINK,
  TweetCreateRequest.JSON_PROPERTY_FOR_SUPER_FOLLOWERS_ONLY,
  TweetCreateRequest.JSON_PROPERTY_GEO,
  TweetCreateRequest.JSON_PROPERTY_MEDIA,
  TweetCreateRequest.JSON_PROPERTY_NULLCAST,
  TweetCreateRequest.JSON_PROPERTY_POLL,
  TweetCreateRequest.JSON_PROPERTY_QUOTE_TWEET_ID,
  TweetCreateRequest.JSON_PROPERTY_REPLY,
  TweetCreateRequest.JSON_PROPERTY_REPLY_SETTINGS,
  TweetCreateRequest.JSON_PROPERTY_TEXT
})
@JsonTypeName("TweetCreateRequest")
@Generated(value="org.openapitools.codegen.languages.JavaMicronautClientCodegen", date="2022-11-05T03:44:30.749524299+01:00[Europe/Berlin]")
@Introspected
public class TweetCreateRequest {
    public static final String JSON_PROPERTY_CARD_URI = "card_uri";
    private String cardUri;

    public static final String JSON_PROPERTY_DIRECT_MESSAGE_DEEP_LINK = "direct_message_deep_link";
    private String directMessageDeepLink;

    public static final String JSON_PROPERTY_FOR_SUPER_FOLLOWERS_ONLY = "for_super_followers_only";
    private Boolean forSuperFollowersOnly = false;

    public static final String JSON_PROPERTY_GEO = "geo";
    private TweetCreateRequestGeo geo;

    public static final String JSON_PROPERTY_MEDIA = "media";
    private TweetCreateRequestMedia media;

    public static final String JSON_PROPERTY_NULLCAST = "nullcast";
    private Boolean nullcast = false;

    public static final String JSON_PROPERTY_POLL = "poll";
    private TweetCreateRequestPoll poll;

    public static final String JSON_PROPERTY_QUOTE_TWEET_ID = "quote_tweet_id";
    private String quoteTweetId;

    public static final String JSON_PROPERTY_REPLY = "reply";
    private TweetCreateRequestReply reply;

    /**
     * Settings to indicate who can reply to the Tweet.
     */
    public enum ReplySettingsEnum {
        FOLLOWING("following"),
        MENTIONEDUSERS("mentionedUsers");

        private String value;

        ReplySettingsEnum(String value) {
            this.value = value;
        }

        @JsonValue
        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        @JsonCreator
        public static ReplySettingsEnum fromValue(String value) {
            for (ReplySettingsEnum b : ReplySettingsEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }
    }
    public static final String JSON_PROPERTY_REPLY_SETTINGS = "reply_settings";
    private ReplySettingsEnum replySettings;

    public static final String JSON_PROPERTY_TEXT = "text";
    private String text;

    public TweetCreateRequest() {
    }

    public TweetCreateRequest cardUri(String cardUri) {
        this.cardUri = cardUri;
        return this;
    }

    /**
     * Card Uri Parameter. This is mutually exclusive from Quote Tweet Id, Poll, Media, and Direct Message Deep Link.
     * @return cardUri
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_CARD_URI)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getCardUri() {
        return cardUri;
    }

    @JsonProperty(JSON_PROPERTY_CARD_URI)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setCardUri(String cardUri) {
        this.cardUri = cardUri;
    }

    public TweetCreateRequest directMessageDeepLink(String directMessageDeepLink) {
        this.directMessageDeepLink = directMessageDeepLink;
        return this;
    }

    /**
     * Link to take the conversation from the public timeline to a private Direct Message.
     * @return directMessageDeepLink
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_DIRECT_MESSAGE_DEEP_LINK)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getDirectMessageDeepLink() {
        return directMessageDeepLink;
    }

    @JsonProperty(JSON_PROPERTY_DIRECT_MESSAGE_DEEP_LINK)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setDirectMessageDeepLink(String directMessageDeepLink) {
        this.directMessageDeepLink = directMessageDeepLink;
    }

    public TweetCreateRequest forSuperFollowersOnly(Boolean forSuperFollowersOnly) {
        this.forSuperFollowersOnly = forSuperFollowersOnly;
        return this;
    }

    /**
     * Exclusive Tweet for super followers.
     * @return forSuperFollowersOnly
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_FOR_SUPER_FOLLOWERS_ONLY)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Boolean getForSuperFollowersOnly() {
        return forSuperFollowersOnly;
    }

    @JsonProperty(JSON_PROPERTY_FOR_SUPER_FOLLOWERS_ONLY)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setForSuperFollowersOnly(Boolean forSuperFollowersOnly) {
        this.forSuperFollowersOnly = forSuperFollowersOnly;
    }

    public TweetCreateRequest geo(TweetCreateRequestGeo geo) {
        this.geo = geo;
        return this;
    }

    /**
     * Get geo
     * @return geo
     **/
    @Valid
    @Nullable
    @JsonProperty(JSON_PROPERTY_GEO)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public TweetCreateRequestGeo getGeo() {
        return geo;
    }

    @JsonProperty(JSON_PROPERTY_GEO)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setGeo(TweetCreateRequestGeo geo) {
        this.geo = geo;
    }

    public TweetCreateRequest media(TweetCreateRequestMedia media) {
        this.media = media;
        return this;
    }

    /**
     * Get media
     * @return media
     **/
    @Valid
    @Nullable
    @JsonProperty(JSON_PROPERTY_MEDIA)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public TweetCreateRequestMedia getMedia() {
        return media;
    }

    @JsonProperty(JSON_PROPERTY_MEDIA)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setMedia(TweetCreateRequestMedia media) {
        this.media = media;
    }

    public TweetCreateRequest nullcast(Boolean nullcast) {
        this.nullcast = nullcast;
        return this;
    }

    /**
     * Nullcasted (promoted-only) Tweets do not appear in the public timeline and are not served to followers.
     * @return nullcast
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_NULLCAST)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Boolean getNullcast() {
        return nullcast;
    }

    @JsonProperty(JSON_PROPERTY_NULLCAST)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setNullcast(Boolean nullcast) {
        this.nullcast = nullcast;
    }

    public TweetCreateRequest poll(TweetCreateRequestPoll poll) {
        this.poll = poll;
        return this;
    }

    /**
     * Get poll
     * @return poll
     **/
    @Valid
    @Nullable
    @JsonProperty(JSON_PROPERTY_POLL)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public TweetCreateRequestPoll getPoll() {
        return poll;
    }

    @JsonProperty(JSON_PROPERTY_POLL)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setPoll(TweetCreateRequestPoll poll) {
        this.poll = poll;
    }

    public TweetCreateRequest quoteTweetId(String quoteTweetId) {
        this.quoteTweetId = quoteTweetId;
        return this;
    }

    /**
     * Unique identifier of this Tweet. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.
     * @return quoteTweetId
     **/
    @Nullable
    @Pattern(regexp="^[0-9]{1,19}$")
    @JsonProperty(JSON_PROPERTY_QUOTE_TWEET_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getQuoteTweetId() {
        return quoteTweetId;
    }

    @JsonProperty(JSON_PROPERTY_QUOTE_TWEET_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setQuoteTweetId(String quoteTweetId) {
        this.quoteTweetId = quoteTweetId;
    }

    public TweetCreateRequest reply(TweetCreateRequestReply reply) {
        this.reply = reply;
        return this;
    }

    /**
     * Get reply
     * @return reply
     **/
    @Valid
    @Nullable
    @JsonProperty(JSON_PROPERTY_REPLY)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public TweetCreateRequestReply getReply() {
        return reply;
    }

    @JsonProperty(JSON_PROPERTY_REPLY)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setReply(TweetCreateRequestReply reply) {
        this.reply = reply;
    }

    public TweetCreateRequest replySettings(ReplySettingsEnum replySettings) {
        this.replySettings = replySettings;
        return this;
    }

    /**
     * Settings to indicate who can reply to the Tweet.
     * @return replySettings
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_REPLY_SETTINGS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public ReplySettingsEnum getReplySettings() {
        return replySettings;
    }

    @JsonProperty(JSON_PROPERTY_REPLY_SETTINGS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setReplySettings(ReplySettingsEnum replySettings) {
        this.replySettings = replySettings;
    }

    public TweetCreateRequest text(String text) {
        this.text = text;
        return this;
    }

    /**
     * The content of the Tweet.
     * @return text
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_TEXT)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getText() {
        return text;
    }

    @JsonProperty(JSON_PROPERTY_TEXT)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setText(String text) {
        this.text = text;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        TweetCreateRequest tweetCreateRequest = (TweetCreateRequest) o;
        return Objects.equals(this.cardUri, tweetCreateRequest.cardUri) &&
            Objects.equals(this.directMessageDeepLink, tweetCreateRequest.directMessageDeepLink) &&
            Objects.equals(this.forSuperFollowersOnly, tweetCreateRequest.forSuperFollowersOnly) &&
            Objects.equals(this.geo, tweetCreateRequest.geo) &&
            Objects.equals(this.media, tweetCreateRequest.media) &&
            Objects.equals(this.nullcast, tweetCreateRequest.nullcast) &&
            Objects.equals(this.poll, tweetCreateRequest.poll) &&
            Objects.equals(this.quoteTweetId, tweetCreateRequest.quoteTweetId) &&
            Objects.equals(this.reply, tweetCreateRequest.reply) &&
            Objects.equals(this.replySettings, tweetCreateRequest.replySettings) &&
            Objects.equals(this.text, tweetCreateRequest.text);
    }

    @Override
    public int hashCode() {
        return Objects.hash(cardUri, directMessageDeepLink, forSuperFollowersOnly, geo, media, nullcast, poll, quoteTweetId, reply, replySettings, text);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class TweetCreateRequest {\n");
        sb.append("    cardUri: ").append(toIndentedString(cardUri)).append("\n");
        sb.append("    directMessageDeepLink: ").append(toIndentedString(directMessageDeepLink)).append("\n");
        sb.append("    forSuperFollowersOnly: ").append(toIndentedString(forSuperFollowersOnly)).append("\n");
        sb.append("    geo: ").append(toIndentedString(geo)).append("\n");
        sb.append("    media: ").append(toIndentedString(media)).append("\n");
        sb.append("    nullcast: ").append(toIndentedString(nullcast)).append("\n");
        sb.append("    poll: ").append(toIndentedString(poll)).append("\n");
        sb.append("    quoteTweetId: ").append(toIndentedString(quoteTweetId)).append("\n");
        sb.append("    reply: ").append(toIndentedString(reply)).append("\n");
        sb.append("    replySettings: ").append(toIndentedString(replySettings)).append("\n");
        sb.append("    text: ").append(toIndentedString(text)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

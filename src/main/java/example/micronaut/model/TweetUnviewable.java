/*
 * Twitter API v2
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.55
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package example.micronaut.model;

import java.util.Objects;
import java.util.Arrays;
import example.micronaut.model.TweetComplianceSchemaTweet;
import java.time.OffsetDateTime;
import com.fasterxml.jackson.annotation.*;

import javax.validation.constraints.*;
import javax.validation.Valid;
import io.micronaut.core.annotation.*;
import javax.annotation.Generated;

/**
 * TweetUnviewable
 */
@JsonPropertyOrder({
  TweetUnviewable.JSON_PROPERTY_APPLICATION,
  TweetUnviewable.JSON_PROPERTY_EVENT_AT,
  TweetUnviewable.JSON_PROPERTY_TWEET
})
@JsonTypeName("TweetUnviewable")
@Generated(value="org.openapitools.codegen.languages.JavaMicronautClientCodegen", date="2022-11-05T03:44:30.749524299+01:00[Europe/Berlin]")
@Introspected
public class TweetUnviewable {
    public static final String JSON_PROPERTY_APPLICATION = "application";
    private String _application;

    public static final String JSON_PROPERTY_EVENT_AT = "event_at";
    private OffsetDateTime eventAt;

    public static final String JSON_PROPERTY_TWEET = "tweet";
    private TweetComplianceSchemaTweet tweet;

    public TweetUnviewable(String _application, OffsetDateTime eventAt, TweetComplianceSchemaTweet tweet) {
        this._application = _application;
        this.eventAt = eventAt;
        this.tweet = tweet;
    }

    public TweetUnviewable _application(String _application) {
        this._application = _application;
        return this;
    }

    /**
     * If the label is being applied or removed. Possible values are ‘apply’ or ‘remove’.
     * @return _application
     **/
    @NotNull
    @JsonProperty(JSON_PROPERTY_APPLICATION)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getApplication() {
        return _application;
    }

    @JsonProperty(JSON_PROPERTY_APPLICATION)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setApplication(String _application) {
        this._application = _application;
    }

    public TweetUnviewable eventAt(OffsetDateTime eventAt) {
        this.eventAt = eventAt;
        return this;
    }

    /**
     * Event time.
     * @return eventAt
     **/
    @NotNull
    @JsonProperty(JSON_PROPERTY_EVENT_AT)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd'T'HH:mm:ss.SSSXXXX")
    public OffsetDateTime getEventAt() {
        return eventAt;
    }

    @JsonProperty(JSON_PROPERTY_EVENT_AT)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd'T'HH:mm:ss.SSSXXXX")
    public void setEventAt(OffsetDateTime eventAt) {
        this.eventAt = eventAt;
    }

    public TweetUnviewable tweet(TweetComplianceSchemaTweet tweet) {
        this.tweet = tweet;
        return this;
    }

    /**
     * Get tweet
     * @return tweet
     **/
    @Valid
    @NotNull
    @JsonProperty(JSON_PROPERTY_TWEET)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public TweetComplianceSchemaTweet getTweet() {
        return tweet;
    }

    @JsonProperty(JSON_PROPERTY_TWEET)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setTweet(TweetComplianceSchemaTweet tweet) {
        this.tweet = tweet;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        TweetUnviewable tweetUnviewable = (TweetUnviewable) o;
        return Objects.equals(this._application, tweetUnviewable._application) &&
            Objects.equals(this.eventAt, tweetUnviewable.eventAt) &&
            Objects.equals(this.tweet, tweetUnviewable.tweet);
    }

    @Override
    public int hashCode() {
        return Objects.hash(_application, eventAt, tweet);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class TweetUnviewable {\n");
        sb.append("    _application: ").append(toIndentedString(_application)).append("\n");
        sb.append("    eventAt: ").append(toIndentedString(eventAt)).append("\n");
        sb.append("    tweet: ").append(toIndentedString(tweet)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

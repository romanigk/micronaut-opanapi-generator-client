/*
 * Twitter API v2
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.55
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package example.micronaut.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.fasterxml.jackson.annotation.*;

import javax.validation.constraints.*;
import javax.validation.Valid;
import io.micronaut.core.annotation.*;
import javax.annotation.Generated;

/**
 * InvalidRequestProblemAllOfErrors
 */
@JsonPropertyOrder({
  InvalidRequestProblemAllOfErrors.JSON_PROPERTY_MESSAGE,
  InvalidRequestProblemAllOfErrors.JSON_PROPERTY_PARAMETERS
})
@JsonTypeName("InvalidRequestProblem_allOf_errors")
@Generated(value="org.openapitools.codegen.languages.JavaMicronautClientCodegen", date="2022-11-05T03:44:30.749524299+01:00[Europe/Berlin]")
@Introspected
public class InvalidRequestProblemAllOfErrors {
    public static final String JSON_PROPERTY_MESSAGE = "message";
    private String message;

    public static final String JSON_PROPERTY_PARAMETERS = "parameters";
    private Map<String, List<String>> parameters = null;

    public InvalidRequestProblemAllOfErrors() {
    }

    public InvalidRequestProblemAllOfErrors message(String message) {
        this.message = message;
        return this;
    }

    /**
     * Get message
     * @return message
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_MESSAGE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getMessage() {
        return message;
    }

    @JsonProperty(JSON_PROPERTY_MESSAGE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setMessage(String message) {
        this.message = message;
    }

    public InvalidRequestProblemAllOfErrors parameters(Map<String, List<String>> parameters) {
        this.parameters = parameters;
        return this;
    }

    public InvalidRequestProblemAllOfErrors putParametersItem(String key, List<String> parametersItem) {
        if (this.parameters == null) {
            this.parameters = new HashMap<>();
        }
        this.parameters.put(key, parametersItem);
        return this;
  }

    /**
     * Get parameters
     * @return parameters
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_PARAMETERS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Map<String, List<String>> getParameters() {
        return parameters;
    }

    @JsonProperty(JSON_PROPERTY_PARAMETERS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setParameters(Map<String, List<String>> parameters) {
        this.parameters = parameters;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        InvalidRequestProblemAllOfErrors invalidRequestProblemAllOfErrors = (InvalidRequestProblemAllOfErrors) o;
        return Objects.equals(this.message, invalidRequestProblemAllOfErrors.message) &&
            Objects.equals(this.parameters, invalidRequestProblemAllOfErrors.parameters);
    }

    @Override
    public int hashCode() {
        return Objects.hash(message, parameters);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class InvalidRequestProblemAllOfErrors {\n");
        sb.append("    message: ").append(toIndentedString(message)).append("\n");
        sb.append("    parameters: ").append(toIndentedString(parameters)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

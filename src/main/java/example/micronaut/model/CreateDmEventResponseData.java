/*
 * Twitter API v2
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.55
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package example.micronaut.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.*;

import javax.validation.constraints.*;
import javax.validation.Valid;
import io.micronaut.core.annotation.*;
import javax.annotation.Generated;

/**
 * CreateDmEventResponseData
 */
@JsonPropertyOrder({
  CreateDmEventResponseData.JSON_PROPERTY_DM_CONVERSATION_ID,
  CreateDmEventResponseData.JSON_PROPERTY_DM_EVENT_ID
})
@JsonTypeName("CreateDmEventResponse_data")
@Generated(value="org.openapitools.codegen.languages.JavaMicronautClientCodegen", date="2022-11-05T03:44:30.749524299+01:00[Europe/Berlin]")
@Introspected
public class CreateDmEventResponseData {
    public static final String JSON_PROPERTY_DM_CONVERSATION_ID = "dm_conversation_id";
    private String dmConversationId;

    public static final String JSON_PROPERTY_DM_EVENT_ID = "dm_event_id";
    private String dmEventId;

    public CreateDmEventResponseData(String dmConversationId, String dmEventId) {
        this.dmConversationId = dmConversationId;
        this.dmEventId = dmEventId;
    }

    public CreateDmEventResponseData dmConversationId(String dmConversationId) {
        this.dmConversationId = dmConversationId;
        return this;
    }

    /**
     * Unique identifier of a DM conversation. This can either be a numeric string, or a pair of numeric strings separated by a &#39;-&#39; character in the case of one-on-one DM Conversations.
     * @return dmConversationId
     **/
    @NotNull
    @Pattern(regexp="^([0-9]{1,19}-[0-9]{1,19}|[0-9]{15,19})$")
    @JsonProperty(JSON_PROPERTY_DM_CONVERSATION_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getDmConversationId() {
        return dmConversationId;
    }

    @JsonProperty(JSON_PROPERTY_DM_CONVERSATION_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setDmConversationId(String dmConversationId) {
        this.dmConversationId = dmConversationId;
    }

    public CreateDmEventResponseData dmEventId(String dmEventId) {
        this.dmEventId = dmEventId;
        return this;
    }

    /**
     * Unique identifier of a DM Event.
     * @return dmEventId
     **/
    @NotNull
    @Pattern(regexp="^[0-9]{1,19}$")
    @JsonProperty(JSON_PROPERTY_DM_EVENT_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getDmEventId() {
        return dmEventId;
    }

    @JsonProperty(JSON_PROPERTY_DM_EVENT_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setDmEventId(String dmEventId) {
        this.dmEventId = dmEventId;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CreateDmEventResponseData createDmEventResponseData = (CreateDmEventResponseData) o;
        return Objects.equals(this.dmConversationId, createDmEventResponseData.dmConversationId) &&
            Objects.equals(this.dmEventId, createDmEventResponseData.dmEventId);
    }

    @Override
    public int hashCode() {
        return Objects.hash(dmConversationId, dmEventId);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class CreateDmEventResponseData {\n");
        sb.append("    dmConversationId: ").append(toIndentedString(dmConversationId)).append("\n");
        sb.append("    dmEventId: ").append(toIndentedString(dmEventId)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

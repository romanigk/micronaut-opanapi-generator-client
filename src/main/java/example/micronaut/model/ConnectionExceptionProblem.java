/*
 * Twitter API v2
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.55
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package example.micronaut.model;

import java.util.Objects;
import java.util.Arrays;
import example.micronaut.model.Problem;
import com.fasterxml.jackson.annotation.*;

import javax.validation.constraints.*;
import javax.validation.Valid;
import io.micronaut.core.annotation.*;
import javax.annotation.Generated;

/**
 * A problem that indicates something is wrong with the connection.
 */
@JsonPropertyOrder({
  ConnectionExceptionProblem.JSON_PROPERTY_CONNECTION_ISSUE
})
@JsonTypeName("ConnectionExceptionProblem")
@Generated(value="org.openapitools.codegen.languages.JavaMicronautClientCodegen", date="2022-11-05T03:44:30.749524299+01:00[Europe/Berlin]")
@Introspected
public class ConnectionExceptionProblem extends Problem {
    /**
     * Gets or Sets connectionIssue
     */
    public enum ConnectionIssueEnum {
        TOOMANYCONNECTIONS("TooManyConnections"),
        PROVISIONINGSUBSCRIPTION("ProvisioningSubscription"),
        RULECONFIGURATIONISSUE("RuleConfigurationIssue"),
        RULESINVALIDISSUE("RulesInvalidIssue");

        private String value;

        ConnectionIssueEnum(String value) {
            this.value = value;
        }

        @JsonValue
        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        @JsonCreator
        public static ConnectionIssueEnum fromValue(String value) {
            for (ConnectionIssueEnum b : ConnectionIssueEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }
    }
    public static final String JSON_PROPERTY_CONNECTION_ISSUE = "connection_issue";
    private ConnectionIssueEnum connectionIssue;

    public ConnectionExceptionProblem(String title, String type) {
        super(title, type);
    }

    public ConnectionExceptionProblem connectionIssue(ConnectionIssueEnum connectionIssue) {
        this.connectionIssue = connectionIssue;
        return this;
    }

    /**
     * Get connectionIssue
     * @return connectionIssue
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_CONNECTION_ISSUE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public ConnectionIssueEnum getConnectionIssue() {
        return connectionIssue;
    }

    @JsonProperty(JSON_PROPERTY_CONNECTION_ISSUE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setConnectionIssue(ConnectionIssueEnum connectionIssue) {
        this.connectionIssue = connectionIssue;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ConnectionExceptionProblem connectionExceptionProblem = (ConnectionExceptionProblem) o;
        return Objects.equals(this.connectionIssue, connectionExceptionProblem.connectionIssue) &&
            super.equals(o);
    }

    @Override
    public int hashCode() {
        return Objects.hash(connectionIssue, super.hashCode());
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class ConnectionExceptionProblem {\n");
        sb.append("    ").append(toIndentedString(super.toString())).append("\n");
        sb.append("    connectionIssue: ").append(toIndentedString(connectionIssue)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

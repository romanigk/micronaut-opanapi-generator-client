/*
 * Twitter API v2
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.55
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package example.micronaut.model;

import java.util.Objects;
import java.util.Arrays;
import java.net.URI;
import com.fasterxml.jackson.annotation.*;

import javax.validation.constraints.*;
import javax.validation.Valid;
import io.micronaut.core.annotation.*;
import javax.annotation.Generated;

/**
 * Variant
 */
@JsonPropertyOrder({
  Variant.JSON_PROPERTY_BIT_RATE,
  Variant.JSON_PROPERTY_CONTENT_TYPE,
  Variant.JSON_PROPERTY_URL
})
@JsonTypeName("Variant")
@Generated(value="org.openapitools.codegen.languages.JavaMicronautClientCodegen", date="2022-11-05T03:44:30.749524299+01:00[Europe/Berlin]")
@Introspected
public class Variant {
    public static final String JSON_PROPERTY_BIT_RATE = "bit_rate";
    private Integer bitRate;

    public static final String JSON_PROPERTY_CONTENT_TYPE = "content_type";
    private String contentType;

    public static final String JSON_PROPERTY_URL = "url";
    private URI url;

    public Variant() {
    }

    public Variant bitRate(Integer bitRate) {
        this.bitRate = bitRate;
        return this;
    }

    /**
     * The bit rate of the media.
     * @return bitRate
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_BIT_RATE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Integer getBitRate() {
        return bitRate;
    }

    @JsonProperty(JSON_PROPERTY_BIT_RATE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setBitRate(Integer bitRate) {
        this.bitRate = bitRate;
    }

    public Variant contentType(String contentType) {
        this.contentType = contentType;
        return this;
    }

    /**
     * The content type of the media.
     * @return contentType
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_CONTENT_TYPE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getContentType() {
        return contentType;
    }

    @JsonProperty(JSON_PROPERTY_CONTENT_TYPE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setContentType(String contentType) {
        this.contentType = contentType;
    }

    public Variant url(URI url) {
        this.url = url;
        return this;
    }

    /**
     * The url to the media.
     * @return url
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_URL)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public URI getUrl() {
        return url;
    }

    @JsonProperty(JSON_PROPERTY_URL)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setUrl(URI url) {
        this.url = url;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Variant variant = (Variant) o;
        return Objects.equals(this.bitRate, variant.bitRate) &&
            Objects.equals(this.contentType, variant.contentType) &&
            Objects.equals(this.url, variant.url);
    }

    @Override
    public int hashCode() {
        return Objects.hash(bitRate, contentType, url);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class Variant {\n");
        sb.append("    bitRate: ").append(toIndentedString(bitRate)).append("\n");
        sb.append("    contentType: ").append(toIndentedString(contentType)).append("\n");
        sb.append("    url: ").append(toIndentedString(url)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

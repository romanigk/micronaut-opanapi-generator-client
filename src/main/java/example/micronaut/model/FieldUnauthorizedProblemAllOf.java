/*
 * Twitter API v2
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.55
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package example.micronaut.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.*;

import javax.validation.constraints.*;
import javax.validation.Valid;
import io.micronaut.core.annotation.*;
import javax.annotation.Generated;

/**
 * FieldUnauthorizedProblemAllOf
 */
@JsonPropertyOrder({
  FieldUnauthorizedProblemAllOf.JSON_PROPERTY_FIELD,
  FieldUnauthorizedProblemAllOf.JSON_PROPERTY_RESOURCE_TYPE,
  FieldUnauthorizedProblemAllOf.JSON_PROPERTY_SECTION
})
@JsonTypeName("FieldUnauthorizedProblem_allOf")
@Generated(value="org.openapitools.codegen.languages.JavaMicronautClientCodegen", date="2022-11-05T03:44:30.749524299+01:00[Europe/Berlin]")
@Introspected
public class FieldUnauthorizedProblemAllOf {
    public static final String JSON_PROPERTY_FIELD = "field";
    private String field;

    /**
     * Gets or Sets resourceType
     */
    public enum ResourceTypeEnum {
        USER("user"),
        TWEET("tweet"),
        MEDIA("media"),
        LIST("list"),
        SPACE("space");

        private String value;

        ResourceTypeEnum(String value) {
            this.value = value;
        }

        @JsonValue
        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        @JsonCreator
        public static ResourceTypeEnum fromValue(String value) {
            for (ResourceTypeEnum b : ResourceTypeEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }
    }
    public static final String JSON_PROPERTY_RESOURCE_TYPE = "resource_type";
    private ResourceTypeEnum resourceType;

    /**
     * Gets or Sets section
     */
    public enum SectionEnum {
        DATA("data"),
        INCLUDES("includes");

        private String value;

        SectionEnum(String value) {
            this.value = value;
        }

        @JsonValue
        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        @JsonCreator
        public static SectionEnum fromValue(String value) {
            for (SectionEnum b : SectionEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }
    }
    public static final String JSON_PROPERTY_SECTION = "section";
    private SectionEnum section;

    public FieldUnauthorizedProblemAllOf(String field, ResourceTypeEnum resourceType, SectionEnum section) {
        this.field = field;
        this.resourceType = resourceType;
        this.section = section;
    }

    public FieldUnauthorizedProblemAllOf field(String field) {
        this.field = field;
        return this;
    }

    /**
     * Get field
     * @return field
     **/
    @NotNull
    @JsonProperty(JSON_PROPERTY_FIELD)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getField() {
        return field;
    }

    @JsonProperty(JSON_PROPERTY_FIELD)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setField(String field) {
        this.field = field;
    }

    public FieldUnauthorizedProblemAllOf resourceType(ResourceTypeEnum resourceType) {
        this.resourceType = resourceType;
        return this;
    }

    /**
     * Get resourceType
     * @return resourceType
     **/
    @NotNull
    @JsonProperty(JSON_PROPERTY_RESOURCE_TYPE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public ResourceTypeEnum getResourceType() {
        return resourceType;
    }

    @JsonProperty(JSON_PROPERTY_RESOURCE_TYPE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setResourceType(ResourceTypeEnum resourceType) {
        this.resourceType = resourceType;
    }

    public FieldUnauthorizedProblemAllOf section(SectionEnum section) {
        this.section = section;
        return this;
    }

    /**
     * Get section
     * @return section
     **/
    @NotNull
    @JsonProperty(JSON_PROPERTY_SECTION)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public SectionEnum getSection() {
        return section;
    }

    @JsonProperty(JSON_PROPERTY_SECTION)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setSection(SectionEnum section) {
        this.section = section;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        FieldUnauthorizedProblemAllOf fieldUnauthorizedProblemAllOf = (FieldUnauthorizedProblemAllOf) o;
        return Objects.equals(this.field, fieldUnauthorizedProblemAllOf.field) &&
            Objects.equals(this.resourceType, fieldUnauthorizedProblemAllOf.resourceType) &&
            Objects.equals(this.section, fieldUnauthorizedProblemAllOf.section);
    }

    @Override
    public int hashCode() {
        return Objects.hash(field, resourceType, section);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class FieldUnauthorizedProblemAllOf {\n");
        sb.append("    field: ").append(toIndentedString(field)).append("\n");
        sb.append("    resourceType: ").append(toIndentedString(resourceType)).append("\n");
        sb.append("    section: ").append(toIndentedString(section)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

/*
 * Twitter API v2
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.55
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package example.micronaut.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.*;

import javax.validation.constraints.*;
import javax.validation.Valid;
import io.micronaut.core.annotation.*;
import javax.annotation.Generated;

/**
 * Represents the data for the annotation.
 */
@JsonPropertyOrder({
  FullTextEntitiesAnnotationsInnerAllOf.JSON_PROPERTY_NORMALIZED_TEXT,
  FullTextEntitiesAnnotationsInnerAllOf.JSON_PROPERTY_PROBABILITY,
  FullTextEntitiesAnnotationsInnerAllOf.JSON_PROPERTY_TYPE
})
@JsonTypeName("FullTextEntities_annotations_inner_allOf")
@Generated(value="org.openapitools.codegen.languages.JavaMicronautClientCodegen", date="2022-11-05T03:44:30.749524299+01:00[Europe/Berlin]")
@Introspected
public class FullTextEntitiesAnnotationsInnerAllOf {
    public static final String JSON_PROPERTY_NORMALIZED_TEXT = "normalized_text";
    private String normalizedText;

    public static final String JSON_PROPERTY_PROBABILITY = "probability";
    private Double probability;

    public static final String JSON_PROPERTY_TYPE = "type";
    private String type;

    public FullTextEntitiesAnnotationsInnerAllOf() {
    }

    public FullTextEntitiesAnnotationsInnerAllOf normalizedText(String normalizedText) {
        this.normalizedText = normalizedText;
        return this;
    }

    /**
     * Text used to determine annotation.
     * @return normalizedText
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_NORMALIZED_TEXT)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getNormalizedText() {
        return normalizedText;
    }

    @JsonProperty(JSON_PROPERTY_NORMALIZED_TEXT)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setNormalizedText(String normalizedText) {
        this.normalizedText = normalizedText;
    }

    public FullTextEntitiesAnnotationsInnerAllOf probability(Double probability) {
        this.probability = probability;
        return this;
    }

    /**
     * Confidence factor for annotation type.
     * minimum: 0
     * maximum: 1
     * @return probability
     **/
    @Nullable
    @DecimalMin("0")
    @DecimalMax("1")
    @JsonProperty(JSON_PROPERTY_PROBABILITY)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Double getProbability() {
        return probability;
    }

    @JsonProperty(JSON_PROPERTY_PROBABILITY)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setProbability(Double probability) {
        this.probability = probability;
    }

    public FullTextEntitiesAnnotationsInnerAllOf type(String type) {
        this.type = type;
        return this;
    }

    /**
     * Annotation type.
     * @return type
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_TYPE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getType() {
        return type;
    }

    @JsonProperty(JSON_PROPERTY_TYPE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setType(String type) {
        this.type = type;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        FullTextEntitiesAnnotationsInnerAllOf fullTextEntitiesAnnotationsInnerAllOf = (FullTextEntitiesAnnotationsInnerAllOf) o;
        return Objects.equals(this.normalizedText, fullTextEntitiesAnnotationsInnerAllOf.normalizedText) &&
            Objects.equals(this.probability, fullTextEntitiesAnnotationsInnerAllOf.probability) &&
            Objects.equals(this.type, fullTextEntitiesAnnotationsInnerAllOf.type);
    }

    @Override
    public int hashCode() {
        return Objects.hash(normalizedText, probability, type);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class FullTextEntitiesAnnotationsInnerAllOf {\n");
        sb.append("    normalizedText: ").append(toIndentedString(normalizedText)).append("\n");
        sb.append("    probability: ").append(toIndentedString(probability)).append("\n");
        sb.append("    type: ").append(toIndentedString(type)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

/*
 * Twitter API v2
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.55
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package example.micronaut.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.*;

import javax.validation.constraints.*;
import javax.validation.Valid;
import io.micronaut.core.annotation.*;
import javax.annotation.Generated;

/**
 * Organic nonpublic engagement metrics for the Tweet at the time of the request.
 */
@JsonPropertyOrder({
  TweetOrganicMetrics.JSON_PROPERTY_IMPRESSION_COUNT,
  TweetOrganicMetrics.JSON_PROPERTY_LIKE_COUNT,
  TweetOrganicMetrics.JSON_PROPERTY_REPLY_COUNT,
  TweetOrganicMetrics.JSON_PROPERTY_RETWEET_COUNT
})
@JsonTypeName("Tweet_organic_metrics")
@Generated(value="org.openapitools.codegen.languages.JavaMicronautClientCodegen", date="2022-11-05T03:44:30.749524299+01:00[Europe/Berlin]")
@Introspected
public class TweetOrganicMetrics {
    public static final String JSON_PROPERTY_IMPRESSION_COUNT = "impression_count";
    private Integer impressionCount;

    public static final String JSON_PROPERTY_LIKE_COUNT = "like_count";
    private Integer likeCount;

    public static final String JSON_PROPERTY_REPLY_COUNT = "reply_count";
    private Integer replyCount;

    public static final String JSON_PROPERTY_RETWEET_COUNT = "retweet_count";
    private Integer retweetCount;

    public TweetOrganicMetrics(Integer impressionCount, Integer likeCount, Integer replyCount, Integer retweetCount) {
        this.impressionCount = impressionCount;
        this.likeCount = likeCount;
        this.replyCount = replyCount;
        this.retweetCount = retweetCount;
    }

    public TweetOrganicMetrics impressionCount(Integer impressionCount) {
        this.impressionCount = impressionCount;
        return this;
    }

    /**
     * Number of times this Tweet has been viewed.
     * @return impressionCount
     **/
    @NotNull
    @JsonProperty(JSON_PROPERTY_IMPRESSION_COUNT)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public Integer getImpressionCount() {
        return impressionCount;
    }

    @JsonProperty(JSON_PROPERTY_IMPRESSION_COUNT)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setImpressionCount(Integer impressionCount) {
        this.impressionCount = impressionCount;
    }

    public TweetOrganicMetrics likeCount(Integer likeCount) {
        this.likeCount = likeCount;
        return this;
    }

    /**
     * Number of times this Tweet has been liked.
     * @return likeCount
     **/
    @NotNull
    @JsonProperty(JSON_PROPERTY_LIKE_COUNT)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public Integer getLikeCount() {
        return likeCount;
    }

    @JsonProperty(JSON_PROPERTY_LIKE_COUNT)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setLikeCount(Integer likeCount) {
        this.likeCount = likeCount;
    }

    public TweetOrganicMetrics replyCount(Integer replyCount) {
        this.replyCount = replyCount;
        return this;
    }

    /**
     * Number of times this Tweet has been replied to.
     * @return replyCount
     **/
    @NotNull
    @JsonProperty(JSON_PROPERTY_REPLY_COUNT)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public Integer getReplyCount() {
        return replyCount;
    }

    @JsonProperty(JSON_PROPERTY_REPLY_COUNT)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setReplyCount(Integer replyCount) {
        this.replyCount = replyCount;
    }

    public TweetOrganicMetrics retweetCount(Integer retweetCount) {
        this.retweetCount = retweetCount;
        return this;
    }

    /**
     * Number of times this Tweet has been Retweeted.
     * @return retweetCount
     **/
    @NotNull
    @JsonProperty(JSON_PROPERTY_RETWEET_COUNT)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public Integer getRetweetCount() {
        return retweetCount;
    }

    @JsonProperty(JSON_PROPERTY_RETWEET_COUNT)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setRetweetCount(Integer retweetCount) {
        this.retweetCount = retweetCount;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        TweetOrganicMetrics tweetOrganicMetrics = (TweetOrganicMetrics) o;
        return Objects.equals(this.impressionCount, tweetOrganicMetrics.impressionCount) &&
            Objects.equals(this.likeCount, tweetOrganicMetrics.likeCount) &&
            Objects.equals(this.replyCount, tweetOrganicMetrics.replyCount) &&
            Objects.equals(this.retweetCount, tweetOrganicMetrics.retweetCount);
    }

    @Override
    public int hashCode() {
        return Objects.hash(impressionCount, likeCount, replyCount, retweetCount);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class TweetOrganicMetrics {\n");
        sb.append("    impressionCount: ").append(toIndentedString(impressionCount)).append("\n");
        sb.append("    likeCount: ").append(toIndentedString(likeCount)).append("\n");
        sb.append("    replyCount: ").append(toIndentedString(replyCount)).append("\n");
        sb.append("    retweetCount: ").append(toIndentedString(retweetCount)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

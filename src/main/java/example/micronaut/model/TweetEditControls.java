/*
 * Twitter API v2
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.55
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package example.micronaut.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.time.OffsetDateTime;
import com.fasterxml.jackson.annotation.*;

import javax.validation.constraints.*;
import javax.validation.Valid;
import io.micronaut.core.annotation.*;
import javax.annotation.Generated;

/**
 * TweetEditControls
 */
@JsonPropertyOrder({
  TweetEditControls.JSON_PROPERTY_EDITABLE_UNTIL,
  TweetEditControls.JSON_PROPERTY_EDITS_REMAINING,
  TweetEditControls.JSON_PROPERTY_IS_EDIT_ELIGIBLE
})
@JsonTypeName("Tweet_edit_controls")
@Generated(value="org.openapitools.codegen.languages.JavaMicronautClientCodegen", date="2022-11-05T03:44:30.749524299+01:00[Europe/Berlin]")
@Introspected
public class TweetEditControls {
    public static final String JSON_PROPERTY_EDITABLE_UNTIL = "editable_until";
    private OffsetDateTime editableUntil;

    public static final String JSON_PROPERTY_EDITS_REMAINING = "edits_remaining";
    private Integer editsRemaining;

    public static final String JSON_PROPERTY_IS_EDIT_ELIGIBLE = "is_edit_eligible";
    private Boolean isEditEligible;

    public TweetEditControls(OffsetDateTime editableUntil, Integer editsRemaining, Boolean isEditEligible) {
        this.editableUntil = editableUntil;
        this.editsRemaining = editsRemaining;
        this.isEditEligible = isEditEligible;
    }

    public TweetEditControls editableUntil(OffsetDateTime editableUntil) {
        this.editableUntil = editableUntil;
        return this;
    }

    /**
     * Time when Tweet is no longer editable.
     * @return editableUntil
     **/
    @NotNull
    @JsonProperty(JSON_PROPERTY_EDITABLE_UNTIL)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd'T'HH:mm:ss.SSSXXXX")
    public OffsetDateTime getEditableUntil() {
        return editableUntil;
    }

    @JsonProperty(JSON_PROPERTY_EDITABLE_UNTIL)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd'T'HH:mm:ss.SSSXXXX")
    public void setEditableUntil(OffsetDateTime editableUntil) {
        this.editableUntil = editableUntil;
    }

    public TweetEditControls editsRemaining(Integer editsRemaining) {
        this.editsRemaining = editsRemaining;
        return this;
    }

    /**
     * Number of times this Tweet can be edited.
     * @return editsRemaining
     **/
    @NotNull
    @JsonProperty(JSON_PROPERTY_EDITS_REMAINING)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public Integer getEditsRemaining() {
        return editsRemaining;
    }

    @JsonProperty(JSON_PROPERTY_EDITS_REMAINING)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setEditsRemaining(Integer editsRemaining) {
        this.editsRemaining = editsRemaining;
    }

    public TweetEditControls isEditEligible(Boolean isEditEligible) {
        this.isEditEligible = isEditEligible;
        return this;
    }

    /**
     * Indicates if this Tweet is eligible to be edited.
     * @return isEditEligible
     **/
    @NotNull
    @JsonProperty(JSON_PROPERTY_IS_EDIT_ELIGIBLE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public Boolean getIsEditEligible() {
        return isEditEligible;
    }

    @JsonProperty(JSON_PROPERTY_IS_EDIT_ELIGIBLE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setIsEditEligible(Boolean isEditEligible) {
        this.isEditEligible = isEditEligible;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        TweetEditControls tweetEditControls = (TweetEditControls) o;
        return Objects.equals(this.editableUntil, tweetEditControls.editableUntil) &&
            Objects.equals(this.editsRemaining, tweetEditControls.editsRemaining) &&
            Objects.equals(this.isEditEligible, tweetEditControls.isEditEligible);
    }

    @Override
    public int hashCode() {
        return Objects.hash(editableUntil, editsRemaining, isEditEligible);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class TweetEditControls {\n");
        sb.append("    editableUntil: ").append(toIndentedString(editableUntil)).append("\n");
        sb.append("    editsRemaining: ").append(toIndentedString(editsRemaining)).append("\n");
        sb.append("    isEditEligible: ").append(toIndentedString(isEditEligible)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

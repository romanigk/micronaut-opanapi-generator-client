/*
 * Twitter API v2
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.55
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package example.micronaut.model;

import java.util.Objects;
import java.util.Arrays;
import example.micronaut.model.ContextAnnotation;
import example.micronaut.model.FullTextEntities;
import example.micronaut.model.ReplySettings;
import example.micronaut.model.TweetAttachments;
import example.micronaut.model.TweetEditControls;
import example.micronaut.model.TweetGeo;
import example.micronaut.model.TweetNonPublicMetrics;
import example.micronaut.model.TweetOrganicMetrics;
import example.micronaut.model.TweetPromotedMetrics;
import example.micronaut.model.TweetPublicMetrics;
import example.micronaut.model.TweetReferencedTweetsInner;
import example.micronaut.model.TweetWithheld;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import com.fasterxml.jackson.annotation.*;

import javax.validation.constraints.*;
import javax.validation.Valid;
import io.micronaut.core.annotation.*;
import javax.annotation.Generated;

/**
 * Tweet
 */
@JsonPropertyOrder({
  Tweet.JSON_PROPERTY_ATTACHMENTS,
  Tweet.JSON_PROPERTY_AUTHOR_ID,
  Tweet.JSON_PROPERTY_CONTEXT_ANNOTATIONS,
  Tweet.JSON_PROPERTY_CONVERSATION_ID,
  Tweet.JSON_PROPERTY_CREATED_AT,
  Tweet.JSON_PROPERTY_EDIT_CONTROLS,
  Tweet.JSON_PROPERTY_EDIT_HISTORY_TWEET_IDS,
  Tweet.JSON_PROPERTY_ENTITIES,
  Tweet.JSON_PROPERTY_GEO,
  Tweet.JSON_PROPERTY_ID,
  Tweet.JSON_PROPERTY_IN_REPLY_TO_USER_ID,
  Tweet.JSON_PROPERTY_LANG,
  Tweet.JSON_PROPERTY_NON_PUBLIC_METRICS,
  Tweet.JSON_PROPERTY_ORGANIC_METRICS,
  Tweet.JSON_PROPERTY_POSSIBLY_SENSITIVE,
  Tweet.JSON_PROPERTY_PROMOTED_METRICS,
  Tweet.JSON_PROPERTY_PUBLIC_METRICS,
  Tweet.JSON_PROPERTY_REFERENCED_TWEETS,
  Tweet.JSON_PROPERTY_REPLY_SETTINGS,
  Tweet.JSON_PROPERTY_SOURCE,
  Tweet.JSON_PROPERTY_TEXT,
  Tweet.JSON_PROPERTY_WITHHELD
})
@JsonTypeName("Tweet")
@Generated(value="org.openapitools.codegen.languages.JavaMicronautClientCodegen", date="2022-11-05T03:44:30.749524299+01:00[Europe/Berlin]")
@Introspected
public class Tweet {
    public static final String JSON_PROPERTY_ATTACHMENTS = "attachments";
    private TweetAttachments attachments;

    public static final String JSON_PROPERTY_AUTHOR_ID = "author_id";
    private String authorId;

    public static final String JSON_PROPERTY_CONTEXT_ANNOTATIONS = "context_annotations";
    private List<ContextAnnotation> contextAnnotations = null;

    public static final String JSON_PROPERTY_CONVERSATION_ID = "conversation_id";
    private String conversationId;

    public static final String JSON_PROPERTY_CREATED_AT = "created_at";
    private OffsetDateTime createdAt;

    public static final String JSON_PROPERTY_EDIT_CONTROLS = "edit_controls";
    private TweetEditControls editControls;

    public static final String JSON_PROPERTY_EDIT_HISTORY_TWEET_IDS = "edit_history_tweet_ids";
    private List<String> editHistoryTweetIds = new ArrayList<>();

    public static final String JSON_PROPERTY_ENTITIES = "entities";
    private FullTextEntities entities;

    public static final String JSON_PROPERTY_GEO = "geo";
    private TweetGeo geo;

    public static final String JSON_PROPERTY_ID = "id";
    private String id;

    public static final String JSON_PROPERTY_IN_REPLY_TO_USER_ID = "in_reply_to_user_id";
    private String inReplyToUserId;

    public static final String JSON_PROPERTY_LANG = "lang";
    private String lang;

    public static final String JSON_PROPERTY_NON_PUBLIC_METRICS = "non_public_metrics";
    private TweetNonPublicMetrics nonPublicMetrics;

    public static final String JSON_PROPERTY_ORGANIC_METRICS = "organic_metrics";
    private TweetOrganicMetrics organicMetrics;

    public static final String JSON_PROPERTY_POSSIBLY_SENSITIVE = "possibly_sensitive";
    private Boolean possiblySensitive;

    public static final String JSON_PROPERTY_PROMOTED_METRICS = "promoted_metrics";
    private TweetPromotedMetrics promotedMetrics;

    public static final String JSON_PROPERTY_PUBLIC_METRICS = "public_metrics";
    private TweetPublicMetrics publicMetrics;

    public static final String JSON_PROPERTY_REFERENCED_TWEETS = "referenced_tweets";
    private List<TweetReferencedTweetsInner> referencedTweets = null;

    public static final String JSON_PROPERTY_REPLY_SETTINGS = "reply_settings";
    private ReplySettings replySettings;

    public static final String JSON_PROPERTY_SOURCE = "source";
    private String source;

    public static final String JSON_PROPERTY_TEXT = "text";
    private String text;

    public static final String JSON_PROPERTY_WITHHELD = "withheld";
    private TweetWithheld withheld;

    public Tweet(List<String> editHistoryTweetIds, String id, String text) {
        this.editHistoryTweetIds = editHistoryTweetIds;
        this.id = id;
        this.text = text;
    }

    public Tweet attachments(TweetAttachments attachments) {
        this.attachments = attachments;
        return this;
    }

    /**
     * Get attachments
     * @return attachments
     **/
    @Valid
    @Nullable
    @JsonProperty(JSON_PROPERTY_ATTACHMENTS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public TweetAttachments getAttachments() {
        return attachments;
    }

    @JsonProperty(JSON_PROPERTY_ATTACHMENTS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setAttachments(TweetAttachments attachments) {
        this.attachments = attachments;
    }

    public Tweet authorId(String authorId) {
        this.authorId = authorId;
        return this;
    }

    /**
     * Unique identifier of this User. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.
     * @return authorId
     **/
    @Nullable
    @Pattern(regexp="^[0-9]{1,19}$")
    @JsonProperty(JSON_PROPERTY_AUTHOR_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getAuthorId() {
        return authorId;
    }

    @JsonProperty(JSON_PROPERTY_AUTHOR_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setAuthorId(String authorId) {
        this.authorId = authorId;
    }

    public Tweet contextAnnotations(List<ContextAnnotation> contextAnnotations) {
        this.contextAnnotations = contextAnnotations;
        return this;
    }

    public Tweet addContextAnnotationsItem(ContextAnnotation contextAnnotationsItem) {
        if (this.contextAnnotations == null) {
            this.contextAnnotations = new ArrayList<>();
        }
        this.contextAnnotations.add(contextAnnotationsItem);
        return this;
    }

    /**
     * Get contextAnnotations
     * @return contextAnnotations
     **/
    @Nullable
    @Size(min=1)
    @JsonProperty(JSON_PROPERTY_CONTEXT_ANNOTATIONS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public List<ContextAnnotation> getContextAnnotations() {
        return contextAnnotations;
    }

    @JsonProperty(JSON_PROPERTY_CONTEXT_ANNOTATIONS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setContextAnnotations(List<ContextAnnotation> contextAnnotations) {
        this.contextAnnotations = contextAnnotations;
    }

    public Tweet conversationId(String conversationId) {
        this.conversationId = conversationId;
        return this;
    }

    /**
     * Unique identifier of this Tweet. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.
     * @return conversationId
     **/
    @Nullable
    @Pattern(regexp="^[0-9]{1,19}$")
    @JsonProperty(JSON_PROPERTY_CONVERSATION_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getConversationId() {
        return conversationId;
    }

    @JsonProperty(JSON_PROPERTY_CONVERSATION_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setConversationId(String conversationId) {
        this.conversationId = conversationId;
    }

    public Tweet createdAt(OffsetDateTime createdAt) {
        this.createdAt = createdAt;
        return this;
    }

    /**
     * Creation time of the Tweet.
     * @return createdAt
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_CREATED_AT)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd'T'HH:mm:ss.SSSXXXX")
    public OffsetDateTime getCreatedAt() {
        return createdAt;
    }

    @JsonProperty(JSON_PROPERTY_CREATED_AT)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd'T'HH:mm:ss.SSSXXXX")
    public void setCreatedAt(OffsetDateTime createdAt) {
        this.createdAt = createdAt;
    }

    public Tweet editControls(TweetEditControls editControls) {
        this.editControls = editControls;
        return this;
    }

    /**
     * Get editControls
     * @return editControls
     **/
    @Valid
    @Nullable
    @JsonProperty(JSON_PROPERTY_EDIT_CONTROLS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public TweetEditControls getEditControls() {
        return editControls;
    }

    @JsonProperty(JSON_PROPERTY_EDIT_CONTROLS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setEditControls(TweetEditControls editControls) {
        this.editControls = editControls;
    }

    public Tweet editHistoryTweetIds(List<String> editHistoryTweetIds) {
        this.editHistoryTweetIds = editHistoryTweetIds;
        return this;
    }

    public Tweet addEditHistoryTweetIdsItem(String editHistoryTweetIdsItem) {
        this.editHistoryTweetIds.add(editHistoryTweetIdsItem);
        return this;
    }

    /**
     * A list of Tweet Ids in this Tweet chain.
     * @return editHistoryTweetIds
     **/
    @NotNull
    @Size(min=1)
    @JsonProperty(JSON_PROPERTY_EDIT_HISTORY_TWEET_IDS)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public List<String> getEditHistoryTweetIds() {
        return editHistoryTweetIds;
    }

    @JsonProperty(JSON_PROPERTY_EDIT_HISTORY_TWEET_IDS)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setEditHistoryTweetIds(List<String> editHistoryTweetIds) {
        this.editHistoryTweetIds = editHistoryTweetIds;
    }

    public Tweet entities(FullTextEntities entities) {
        this.entities = entities;
        return this;
    }

    /**
     * Get entities
     * @return entities
     **/
    @Valid
    @Nullable
    @JsonProperty(JSON_PROPERTY_ENTITIES)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public FullTextEntities getEntities() {
        return entities;
    }

    @JsonProperty(JSON_PROPERTY_ENTITIES)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setEntities(FullTextEntities entities) {
        this.entities = entities;
    }

    public Tweet geo(TweetGeo geo) {
        this.geo = geo;
        return this;
    }

    /**
     * Get geo
     * @return geo
     **/
    @Valid
    @Nullable
    @JsonProperty(JSON_PROPERTY_GEO)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public TweetGeo getGeo() {
        return geo;
    }

    @JsonProperty(JSON_PROPERTY_GEO)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setGeo(TweetGeo geo) {
        this.geo = geo;
    }

    public Tweet id(String id) {
        this.id = id;
        return this;
    }

    /**
     * Unique identifier of this Tweet. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.
     * @return id
     **/
    @NotNull
    @Pattern(regexp="^[0-9]{1,19}$")
    @JsonProperty(JSON_PROPERTY_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getId() {
        return id;
    }

    @JsonProperty(JSON_PROPERTY_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setId(String id) {
        this.id = id;
    }

    public Tweet inReplyToUserId(String inReplyToUserId) {
        this.inReplyToUserId = inReplyToUserId;
        return this;
    }

    /**
     * Unique identifier of this User. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.
     * @return inReplyToUserId
     **/
    @Nullable
    @Pattern(regexp="^[0-9]{1,19}$")
    @JsonProperty(JSON_PROPERTY_IN_REPLY_TO_USER_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getInReplyToUserId() {
        return inReplyToUserId;
    }

    @JsonProperty(JSON_PROPERTY_IN_REPLY_TO_USER_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setInReplyToUserId(String inReplyToUserId) {
        this.inReplyToUserId = inReplyToUserId;
    }

    public Tweet lang(String lang) {
        this.lang = lang;
        return this;
    }

    /**
     * Language of the Tweet, if detected by Twitter. Returned as a BCP47 language tag.
     * @return lang
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_LANG)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getLang() {
        return lang;
    }

    @JsonProperty(JSON_PROPERTY_LANG)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setLang(String lang) {
        this.lang = lang;
    }

    public Tweet nonPublicMetrics(TweetNonPublicMetrics nonPublicMetrics) {
        this.nonPublicMetrics = nonPublicMetrics;
        return this;
    }

    /**
     * Get nonPublicMetrics
     * @return nonPublicMetrics
     **/
    @Valid
    @Nullable
    @JsonProperty(JSON_PROPERTY_NON_PUBLIC_METRICS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public TweetNonPublicMetrics getNonPublicMetrics() {
        return nonPublicMetrics;
    }

    @JsonProperty(JSON_PROPERTY_NON_PUBLIC_METRICS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setNonPublicMetrics(TweetNonPublicMetrics nonPublicMetrics) {
        this.nonPublicMetrics = nonPublicMetrics;
    }

    public Tweet organicMetrics(TweetOrganicMetrics organicMetrics) {
        this.organicMetrics = organicMetrics;
        return this;
    }

    /**
     * Get organicMetrics
     * @return organicMetrics
     **/
    @Valid
    @Nullable
    @JsonProperty(JSON_PROPERTY_ORGANIC_METRICS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public TweetOrganicMetrics getOrganicMetrics() {
        return organicMetrics;
    }

    @JsonProperty(JSON_PROPERTY_ORGANIC_METRICS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setOrganicMetrics(TweetOrganicMetrics organicMetrics) {
        this.organicMetrics = organicMetrics;
    }

    public Tweet possiblySensitive(Boolean possiblySensitive) {
        this.possiblySensitive = possiblySensitive;
        return this;
    }

    /**
     * Indicates if this Tweet contains URLs marked as sensitive, for example content suitable for mature audiences.
     * @return possiblySensitive
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_POSSIBLY_SENSITIVE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Boolean getPossiblySensitive() {
        return possiblySensitive;
    }

    @JsonProperty(JSON_PROPERTY_POSSIBLY_SENSITIVE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setPossiblySensitive(Boolean possiblySensitive) {
        this.possiblySensitive = possiblySensitive;
    }

    public Tweet promotedMetrics(TweetPromotedMetrics promotedMetrics) {
        this.promotedMetrics = promotedMetrics;
        return this;
    }

    /**
     * Get promotedMetrics
     * @return promotedMetrics
     **/
    @Valid
    @Nullable
    @JsonProperty(JSON_PROPERTY_PROMOTED_METRICS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public TweetPromotedMetrics getPromotedMetrics() {
        return promotedMetrics;
    }

    @JsonProperty(JSON_PROPERTY_PROMOTED_METRICS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setPromotedMetrics(TweetPromotedMetrics promotedMetrics) {
        this.promotedMetrics = promotedMetrics;
    }

    public Tweet publicMetrics(TweetPublicMetrics publicMetrics) {
        this.publicMetrics = publicMetrics;
        return this;
    }

    /**
     * Get publicMetrics
     * @return publicMetrics
     **/
    @Valid
    @Nullable
    @JsonProperty(JSON_PROPERTY_PUBLIC_METRICS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public TweetPublicMetrics getPublicMetrics() {
        return publicMetrics;
    }

    @JsonProperty(JSON_PROPERTY_PUBLIC_METRICS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setPublicMetrics(TweetPublicMetrics publicMetrics) {
        this.publicMetrics = publicMetrics;
    }

    public Tweet referencedTweets(List<TweetReferencedTweetsInner> referencedTweets) {
        this.referencedTweets = referencedTweets;
        return this;
    }

    public Tweet addReferencedTweetsItem(TweetReferencedTweetsInner referencedTweetsItem) {
        if (this.referencedTweets == null) {
            this.referencedTweets = new ArrayList<>();
        }
        this.referencedTweets.add(referencedTweetsItem);
        return this;
    }

    /**
     * A list of Tweets this Tweet refers to. For example, if the parent Tweet is a Retweet, a Quoted Tweet or a Reply, it will include the related Tweet referenced to by its parent.
     * @return referencedTweets
     **/
    @Nullable
    @Size(min=1)
    @JsonProperty(JSON_PROPERTY_REFERENCED_TWEETS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public List<TweetReferencedTweetsInner> getReferencedTweets() {
        return referencedTweets;
    }

    @JsonProperty(JSON_PROPERTY_REFERENCED_TWEETS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setReferencedTweets(List<TweetReferencedTweetsInner> referencedTweets) {
        this.referencedTweets = referencedTweets;
    }

    public Tweet replySettings(ReplySettings replySettings) {
        this.replySettings = replySettings;
        return this;
    }

    /**
     * Get replySettings
     * @return replySettings
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_REPLY_SETTINGS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public ReplySettings getReplySettings() {
        return replySettings;
    }

    @JsonProperty(JSON_PROPERTY_REPLY_SETTINGS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setReplySettings(ReplySettings replySettings) {
        this.replySettings = replySettings;
    }

    public Tweet source(String source) {
        this.source = source;
        return this;
    }

    /**
     * The name of the app the user Tweeted from.
     * @return source
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_SOURCE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getSource() {
        return source;
    }

    @JsonProperty(JSON_PROPERTY_SOURCE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setSource(String source) {
        this.source = source;
    }

    public Tweet text(String text) {
        this.text = text;
        return this;
    }

    /**
     * The content of the Tweet.
     * @return text
     **/
    @NotNull
    @JsonProperty(JSON_PROPERTY_TEXT)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getText() {
        return text;
    }

    @JsonProperty(JSON_PROPERTY_TEXT)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setText(String text) {
        this.text = text;
    }

    public Tweet withheld(TweetWithheld withheld) {
        this.withheld = withheld;
        return this;
    }

    /**
     * Get withheld
     * @return withheld
     **/
    @Valid
    @Nullable
    @JsonProperty(JSON_PROPERTY_WITHHELD)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public TweetWithheld getWithheld() {
        return withheld;
    }

    @JsonProperty(JSON_PROPERTY_WITHHELD)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setWithheld(TweetWithheld withheld) {
        this.withheld = withheld;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Tweet tweet = (Tweet) o;
        return Objects.equals(this.attachments, tweet.attachments) &&
            Objects.equals(this.authorId, tweet.authorId) &&
            Objects.equals(this.contextAnnotations, tweet.contextAnnotations) &&
            Objects.equals(this.conversationId, tweet.conversationId) &&
            Objects.equals(this.createdAt, tweet.createdAt) &&
            Objects.equals(this.editControls, tweet.editControls) &&
            Objects.equals(this.editHistoryTweetIds, tweet.editHistoryTweetIds) &&
            Objects.equals(this.entities, tweet.entities) &&
            Objects.equals(this.geo, tweet.geo) &&
            Objects.equals(this.id, tweet.id) &&
            Objects.equals(this.inReplyToUserId, tweet.inReplyToUserId) &&
            Objects.equals(this.lang, tweet.lang) &&
            Objects.equals(this.nonPublicMetrics, tweet.nonPublicMetrics) &&
            Objects.equals(this.organicMetrics, tweet.organicMetrics) &&
            Objects.equals(this.possiblySensitive, tweet.possiblySensitive) &&
            Objects.equals(this.promotedMetrics, tweet.promotedMetrics) &&
            Objects.equals(this.publicMetrics, tweet.publicMetrics) &&
            Objects.equals(this.referencedTweets, tweet.referencedTweets) &&
            Objects.equals(this.replySettings, tweet.replySettings) &&
            Objects.equals(this.source, tweet.source) &&
            Objects.equals(this.text, tweet.text) &&
            Objects.equals(this.withheld, tweet.withheld);
    }

    @Override
    public int hashCode() {
        return Objects.hash(attachments, authorId, contextAnnotations, conversationId, createdAt, editControls, editHistoryTweetIds, entities, geo, id, inReplyToUserId, lang, nonPublicMetrics, organicMetrics, possiblySensitive, promotedMetrics, publicMetrics, referencedTweets, replySettings, source, text, withheld);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class Tweet {\n");
        sb.append("    attachments: ").append(toIndentedString(attachments)).append("\n");
        sb.append("    authorId: ").append(toIndentedString(authorId)).append("\n");
        sb.append("    contextAnnotations: ").append(toIndentedString(contextAnnotations)).append("\n");
        sb.append("    conversationId: ").append(toIndentedString(conversationId)).append("\n");
        sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
        sb.append("    editControls: ").append(toIndentedString(editControls)).append("\n");
        sb.append("    editHistoryTweetIds: ").append(toIndentedString(editHistoryTweetIds)).append("\n");
        sb.append("    entities: ").append(toIndentedString(entities)).append("\n");
        sb.append("    geo: ").append(toIndentedString(geo)).append("\n");
        sb.append("    id: ").append(toIndentedString(id)).append("\n");
        sb.append("    inReplyToUserId: ").append(toIndentedString(inReplyToUserId)).append("\n");
        sb.append("    lang: ").append(toIndentedString(lang)).append("\n");
        sb.append("    nonPublicMetrics: ").append(toIndentedString(nonPublicMetrics)).append("\n");
        sb.append("    organicMetrics: ").append(toIndentedString(organicMetrics)).append("\n");
        sb.append("    possiblySensitive: ").append(toIndentedString(possiblySensitive)).append("\n");
        sb.append("    promotedMetrics: ").append(toIndentedString(promotedMetrics)).append("\n");
        sb.append("    publicMetrics: ").append(toIndentedString(publicMetrics)).append("\n");
        sb.append("    referencedTweets: ").append(toIndentedString(referencedTweets)).append("\n");
        sb.append("    replySettings: ").append(toIndentedString(replySettings)).append("\n");
        sb.append("    source: ").append(toIndentedString(source)).append("\n");
        sb.append("    text: ").append(toIndentedString(text)).append("\n");
        sb.append("    withheld: ").append(toIndentedString(withheld)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

/*
 * Twitter API v2
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.55
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package example.micronaut.model;

import java.util.Objects;
import java.util.Arrays;
import example.micronaut.model.UserEntities;
import example.micronaut.model.UserPublicMetrics;
import example.micronaut.model.UserWithheld;
import java.net.URI;
import java.time.OffsetDateTime;
import com.fasterxml.jackson.annotation.*;

import javax.validation.constraints.*;
import javax.validation.Valid;
import io.micronaut.core.annotation.*;
import javax.annotation.Generated;

/**
 * The Twitter User object.
 */
@JsonPropertyOrder({
  User.JSON_PROPERTY_CREATED_AT,
  User.JSON_PROPERTY_DESCRIPTION,
  User.JSON_PROPERTY_ENTITIES,
  User.JSON_PROPERTY_ID,
  User.JSON_PROPERTY_LOCATION,
  User.JSON_PROPERTY_NAME,
  User.JSON_PROPERTY_PINNED_TWEET_ID,
  User.JSON_PROPERTY_PROFILE_IMAGE_URL,
  User.JSON_PROPERTY_PROTECTED,
  User.JSON_PROPERTY_PUBLIC_METRICS,
  User.JSON_PROPERTY_URL,
  User.JSON_PROPERTY_USERNAME,
  User.JSON_PROPERTY_VERIFIED,
  User.JSON_PROPERTY_WITHHELD
})
@JsonTypeName("User")
@Generated(value="org.openapitools.codegen.languages.JavaMicronautClientCodegen", date="2022-11-05T03:44:30.749524299+01:00[Europe/Berlin]")
@Introspected
public class User {
    public static final String JSON_PROPERTY_CREATED_AT = "created_at";
    private OffsetDateTime createdAt;

    public static final String JSON_PROPERTY_DESCRIPTION = "description";
    private String description;

    public static final String JSON_PROPERTY_ENTITIES = "entities";
    private UserEntities entities;

    public static final String JSON_PROPERTY_ID = "id";
    private String id;

    public static final String JSON_PROPERTY_LOCATION = "location";
    private String location;

    public static final String JSON_PROPERTY_NAME = "name";
    private String name;

    public static final String JSON_PROPERTY_PINNED_TWEET_ID = "pinned_tweet_id";
    private String pinnedTweetId;

    public static final String JSON_PROPERTY_PROFILE_IMAGE_URL = "profile_image_url";
    private URI profileImageUrl;

    public static final String JSON_PROPERTY_PROTECTED = "protected";
    private Boolean _protected;

    public static final String JSON_PROPERTY_PUBLIC_METRICS = "public_metrics";
    private UserPublicMetrics publicMetrics;

    public static final String JSON_PROPERTY_URL = "url";
    private String url;

    public static final String JSON_PROPERTY_USERNAME = "username";
    private String username;

    public static final String JSON_PROPERTY_VERIFIED = "verified";
    private Boolean verified;

    public static final String JSON_PROPERTY_WITHHELD = "withheld";
    private UserWithheld withheld;

    public User(String id, String name, String username) {
        this.id = id;
        this.name = name;
        this.username = username;
    }

    public User createdAt(OffsetDateTime createdAt) {
        this.createdAt = createdAt;
        return this;
    }

    /**
     * Creation time of this User.
     * @return createdAt
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_CREATED_AT)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd'T'HH:mm:ss.SSSXXXX")
    public OffsetDateTime getCreatedAt() {
        return createdAt;
    }

    @JsonProperty(JSON_PROPERTY_CREATED_AT)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd'T'HH:mm:ss.SSSXXXX")
    public void setCreatedAt(OffsetDateTime createdAt) {
        this.createdAt = createdAt;
    }

    public User description(String description) {
        this.description = description;
        return this;
    }

    /**
     * The text of this User&#39;s profile description (also known as bio), if the User provided one.
     * @return description
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_DESCRIPTION)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getDescription() {
        return description;
    }

    @JsonProperty(JSON_PROPERTY_DESCRIPTION)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setDescription(String description) {
        this.description = description;
    }

    public User entities(UserEntities entities) {
        this.entities = entities;
        return this;
    }

    /**
     * Get entities
     * @return entities
     **/
    @Valid
    @Nullable
    @JsonProperty(JSON_PROPERTY_ENTITIES)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public UserEntities getEntities() {
        return entities;
    }

    @JsonProperty(JSON_PROPERTY_ENTITIES)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setEntities(UserEntities entities) {
        this.entities = entities;
    }

    public User id(String id) {
        this.id = id;
        return this;
    }

    /**
     * Unique identifier of this User. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.
     * @return id
     **/
    @NotNull
    @Pattern(regexp="^[0-9]{1,19}$")
    @JsonProperty(JSON_PROPERTY_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getId() {
        return id;
    }

    @JsonProperty(JSON_PROPERTY_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setId(String id) {
        this.id = id;
    }

    public User location(String location) {
        this.location = location;
        return this;
    }

    /**
     * The location specified in the User&#39;s profile, if the User provided one. As this is a freeform value, it may not indicate a valid location, but it may be fuzzily evaluated when performing searches with location queries.
     * @return location
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_LOCATION)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getLocation() {
        return location;
    }

    @JsonProperty(JSON_PROPERTY_LOCATION)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setLocation(String location) {
        this.location = location;
    }

    public User name(String name) {
        this.name = name;
        return this;
    }

    /**
     * The friendly name of this User, as shown on their profile.
     * @return name
     **/
    @NotNull
    @JsonProperty(JSON_PROPERTY_NAME)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getName() {
        return name;
    }

    @JsonProperty(JSON_PROPERTY_NAME)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setName(String name) {
        this.name = name;
    }

    public User pinnedTweetId(String pinnedTweetId) {
        this.pinnedTweetId = pinnedTweetId;
        return this;
    }

    /**
     * Unique identifier of this Tweet. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.
     * @return pinnedTweetId
     **/
    @Nullable
    @Pattern(regexp="^[0-9]{1,19}$")
    @JsonProperty(JSON_PROPERTY_PINNED_TWEET_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getPinnedTweetId() {
        return pinnedTweetId;
    }

    @JsonProperty(JSON_PROPERTY_PINNED_TWEET_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setPinnedTweetId(String pinnedTweetId) {
        this.pinnedTweetId = pinnedTweetId;
    }

    public User profileImageUrl(URI profileImageUrl) {
        this.profileImageUrl = profileImageUrl;
        return this;
    }

    /**
     * The URL to the profile image for this User.
     * @return profileImageUrl
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_PROFILE_IMAGE_URL)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public URI getProfileImageUrl() {
        return profileImageUrl;
    }

    @JsonProperty(JSON_PROPERTY_PROFILE_IMAGE_URL)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setProfileImageUrl(URI profileImageUrl) {
        this.profileImageUrl = profileImageUrl;
    }

    public User _protected(Boolean _protected) {
        this._protected = _protected;
        return this;
    }

    /**
     * Indicates if this User has chosen to protect their Tweets (in other words, if this User&#39;s Tweets are private).
     * @return _protected
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_PROTECTED)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Boolean getProtected() {
        return _protected;
    }

    @JsonProperty(JSON_PROPERTY_PROTECTED)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setProtected(Boolean _protected) {
        this._protected = _protected;
    }

    public User publicMetrics(UserPublicMetrics publicMetrics) {
        this.publicMetrics = publicMetrics;
        return this;
    }

    /**
     * Get publicMetrics
     * @return publicMetrics
     **/
    @Valid
    @Nullable
    @JsonProperty(JSON_PROPERTY_PUBLIC_METRICS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public UserPublicMetrics getPublicMetrics() {
        return publicMetrics;
    }

    @JsonProperty(JSON_PROPERTY_PUBLIC_METRICS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setPublicMetrics(UserPublicMetrics publicMetrics) {
        this.publicMetrics = publicMetrics;
    }

    public User url(String url) {
        this.url = url;
        return this;
    }

    /**
     * The URL specified in the User&#39;s profile.
     * @return url
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_URL)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getUrl() {
        return url;
    }

    @JsonProperty(JSON_PROPERTY_URL)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setUrl(String url) {
        this.url = url;
    }

    public User username(String username) {
        this.username = username;
        return this;
    }

    /**
     * The Twitter handle (screen name) of this user.
     * @return username
     **/
    @NotNull
    @Pattern(regexp="^[A-Za-z0-9_]{1,15}$")
    @JsonProperty(JSON_PROPERTY_USERNAME)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getUsername() {
        return username;
    }

    @JsonProperty(JSON_PROPERTY_USERNAME)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setUsername(String username) {
        this.username = username;
    }

    public User verified(Boolean verified) {
        this.verified = verified;
        return this;
    }

    /**
     * Indicate if this User is a verified Twitter User.
     * @return verified
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_VERIFIED)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Boolean getVerified() {
        return verified;
    }

    @JsonProperty(JSON_PROPERTY_VERIFIED)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setVerified(Boolean verified) {
        this.verified = verified;
    }

    public User withheld(UserWithheld withheld) {
        this.withheld = withheld;
        return this;
    }

    /**
     * Get withheld
     * @return withheld
     **/
    @Valid
    @Nullable
    @JsonProperty(JSON_PROPERTY_WITHHELD)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public UserWithheld getWithheld() {
        return withheld;
    }

    @JsonProperty(JSON_PROPERTY_WITHHELD)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setWithheld(UserWithheld withheld) {
        this.withheld = withheld;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        User user = (User) o;
        return Objects.equals(this.createdAt, user.createdAt) &&
            Objects.equals(this.description, user.description) &&
            Objects.equals(this.entities, user.entities) &&
            Objects.equals(this.id, user.id) &&
            Objects.equals(this.location, user.location) &&
            Objects.equals(this.name, user.name) &&
            Objects.equals(this.pinnedTweetId, user.pinnedTweetId) &&
            Objects.equals(this.profileImageUrl, user.profileImageUrl) &&
            Objects.equals(this._protected, user._protected) &&
            Objects.equals(this.publicMetrics, user.publicMetrics) &&
            Objects.equals(this.url, user.url) &&
            Objects.equals(this.username, user.username) &&
            Objects.equals(this.verified, user.verified) &&
            Objects.equals(this.withheld, user.withheld);
    }

    @Override
    public int hashCode() {
        return Objects.hash(createdAt, description, entities, id, location, name, pinnedTweetId, profileImageUrl, _protected, publicMetrics, url, username, verified, withheld);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class User {\n");
        sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
        sb.append("    description: ").append(toIndentedString(description)).append("\n");
        sb.append("    entities: ").append(toIndentedString(entities)).append("\n");
        sb.append("    id: ").append(toIndentedString(id)).append("\n");
        sb.append("    location: ").append(toIndentedString(location)).append("\n");
        sb.append("    name: ").append(toIndentedString(name)).append("\n");
        sb.append("    pinnedTweetId: ").append(toIndentedString(pinnedTweetId)).append("\n");
        sb.append("    profileImageUrl: ").append(toIndentedString(profileImageUrl)).append("\n");
        sb.append("    _protected: ").append(toIndentedString(_protected)).append("\n");
        sb.append("    publicMetrics: ").append(toIndentedString(publicMetrics)).append("\n");
        sb.append("    url: ").append(toIndentedString(url)).append("\n");
        sb.append("    username: ").append(toIndentedString(username)).append("\n");
        sb.append("    verified: ").append(toIndentedString(verified)).append("\n");
        sb.append("    withheld: ").append(toIndentedString(withheld)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

/*
 * Twitter API v2
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.55
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package example.micronaut.model;

import java.util.Objects;
import java.util.Arrays;
import example.micronaut.model.TweetComplianceSchema;
import example.micronaut.model.TweetDeleteComplianceSchema;
import example.micronaut.model.TweetDropComplianceSchema;
import example.micronaut.model.TweetEditComplianceObjectSchema;
import example.micronaut.model.TweetEditComplianceSchema;
import example.micronaut.model.TweetTakedownComplianceSchema;
import example.micronaut.model.TweetUndropComplianceSchema;
import example.micronaut.model.TweetWithheldComplianceSchema;
import com.fasterxml.jackson.annotation.*;

import javax.validation.constraints.*;
import javax.validation.Valid;
import io.micronaut.core.annotation.*;
import javax.annotation.Generated;

/**
 * Tweet compliance data.
 */
@JsonPropertyOrder({
  TweetComplianceData.JSON_PROPERTY_DELETE,
  TweetComplianceData.JSON_PROPERTY_WITHHELD,
  TweetComplianceData.JSON_PROPERTY_DROP,
  TweetComplianceData.JSON_PROPERTY_UNDROP,
  TweetComplianceData.JSON_PROPERTY_TWEET_EDIT
})
@JsonTypeName("TweetComplianceData")
@Generated(value="org.openapitools.codegen.languages.JavaMicronautClientCodegen", date="2022-11-05T03:44:30.749524299+01:00[Europe/Berlin]")
@Introspected
public class TweetComplianceData {
    public static final String JSON_PROPERTY_DELETE = "delete";
    private TweetComplianceSchema delete;

    public static final String JSON_PROPERTY_WITHHELD = "withheld";
    private TweetTakedownComplianceSchema withheld;

    public static final String JSON_PROPERTY_DROP = "drop";
    private TweetComplianceSchema drop;

    public static final String JSON_PROPERTY_UNDROP = "undrop";
    private TweetComplianceSchema undrop;

    public static final String JSON_PROPERTY_TWEET_EDIT = "tweet_edit";
    private TweetEditComplianceObjectSchema tweetEdit;

    public TweetComplianceData(TweetComplianceSchema delete, TweetTakedownComplianceSchema withheld, TweetComplianceSchema drop, TweetComplianceSchema undrop, TweetEditComplianceObjectSchema tweetEdit) {
        this.delete = delete;
        this.withheld = withheld;
        this.drop = drop;
        this.undrop = undrop;
        this.tweetEdit = tweetEdit;
    }

    public TweetComplianceData delete(TweetComplianceSchema delete) {
        this.delete = delete;
        return this;
    }

    /**
     * Get delete
     * @return delete
     **/
    @Valid
    @NotNull
    @JsonProperty(JSON_PROPERTY_DELETE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public TweetComplianceSchema getDelete() {
        return delete;
    }

    @JsonProperty(JSON_PROPERTY_DELETE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setDelete(TweetComplianceSchema delete) {
        this.delete = delete;
    }

    public TweetComplianceData withheld(TweetTakedownComplianceSchema withheld) {
        this.withheld = withheld;
        return this;
    }

    /**
     * Get withheld
     * @return withheld
     **/
    @Valid
    @NotNull
    @JsonProperty(JSON_PROPERTY_WITHHELD)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public TweetTakedownComplianceSchema getWithheld() {
        return withheld;
    }

    @JsonProperty(JSON_PROPERTY_WITHHELD)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setWithheld(TweetTakedownComplianceSchema withheld) {
        this.withheld = withheld;
    }

    public TweetComplianceData drop(TweetComplianceSchema drop) {
        this.drop = drop;
        return this;
    }

    /**
     * Get drop
     * @return drop
     **/
    @Valid
    @NotNull
    @JsonProperty(JSON_PROPERTY_DROP)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public TweetComplianceSchema getDrop() {
        return drop;
    }

    @JsonProperty(JSON_PROPERTY_DROP)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setDrop(TweetComplianceSchema drop) {
        this.drop = drop;
    }

    public TweetComplianceData undrop(TweetComplianceSchema undrop) {
        this.undrop = undrop;
        return this;
    }

    /**
     * Get undrop
     * @return undrop
     **/
    @Valid
    @NotNull
    @JsonProperty(JSON_PROPERTY_UNDROP)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public TweetComplianceSchema getUndrop() {
        return undrop;
    }

    @JsonProperty(JSON_PROPERTY_UNDROP)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setUndrop(TweetComplianceSchema undrop) {
        this.undrop = undrop;
    }

    public TweetComplianceData tweetEdit(TweetEditComplianceObjectSchema tweetEdit) {
        this.tweetEdit = tweetEdit;
        return this;
    }

    /**
     * Get tweetEdit
     * @return tweetEdit
     **/
    @Valid
    @NotNull
    @JsonProperty(JSON_PROPERTY_TWEET_EDIT)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public TweetEditComplianceObjectSchema getTweetEdit() {
        return tweetEdit;
    }

    @JsonProperty(JSON_PROPERTY_TWEET_EDIT)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setTweetEdit(TweetEditComplianceObjectSchema tweetEdit) {
        this.tweetEdit = tweetEdit;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        TweetComplianceData tweetComplianceData = (TweetComplianceData) o;
        return Objects.equals(this.delete, tweetComplianceData.delete) &&
            Objects.equals(this.withheld, tweetComplianceData.withheld) &&
            Objects.equals(this.drop, tweetComplianceData.drop) &&
            Objects.equals(this.undrop, tweetComplianceData.undrop) &&
            Objects.equals(this.tweetEdit, tweetComplianceData.tweetEdit);
    }

    @Override
    public int hashCode() {
        return Objects.hash(delete, withheld, drop, undrop, tweetEdit);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class TweetComplianceData {\n");
        sb.append("    delete: ").append(toIndentedString(delete)).append("\n");
        sb.append("    withheld: ").append(toIndentedString(withheld)).append("\n");
        sb.append("    drop: ").append(toIndentedString(drop)).append("\n");
        sb.append("    undrop: ").append(toIndentedString(undrop)).append("\n");
        sb.append("    tweetEdit: ").append(toIndentedString(tweetEdit)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

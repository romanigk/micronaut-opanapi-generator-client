/*
 * Twitter API v2
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.55
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package example.micronaut.model;

import java.util.Objects;
import java.util.Arrays;
import java.time.OffsetDateTime;
import com.fasterxml.jackson.annotation.*;

import javax.validation.constraints.*;
import javax.validation.Valid;
import io.micronaut.core.annotation.*;
import javax.annotation.Generated;

/**
 * Represent a Search Count Result.
 */
@JsonPropertyOrder({
  SearchCount.JSON_PROPERTY_END,
  SearchCount.JSON_PROPERTY_START,
  SearchCount.JSON_PROPERTY_TWEET_COUNT
})
@JsonTypeName("SearchCount")
@Generated(value="org.openapitools.codegen.languages.JavaMicronautClientCodegen", date="2022-11-05T03:44:30.749524299+01:00[Europe/Berlin]")
@Introspected
public class SearchCount {
    public static final String JSON_PROPERTY_END = "end";
    private OffsetDateTime end;

    public static final String JSON_PROPERTY_START = "start";
    private OffsetDateTime start;

    public static final String JSON_PROPERTY_TWEET_COUNT = "tweet_count";
    private Integer tweetCount;

    public SearchCount(OffsetDateTime end, OffsetDateTime start, Integer tweetCount) {
        this.end = end;
        this.start = start;
        this.tweetCount = tweetCount;
    }

    public SearchCount end(OffsetDateTime end) {
        this.end = end;
        return this;
    }

    /**
     * The end time of the bucket.
     * @return end
     **/
    @NotNull
    @JsonProperty(JSON_PROPERTY_END)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd'T'HH:mm:ss.SSSXXXX")
    public OffsetDateTime getEnd() {
        return end;
    }

    @JsonProperty(JSON_PROPERTY_END)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd'T'HH:mm:ss.SSSXXXX")
    public void setEnd(OffsetDateTime end) {
        this.end = end;
    }

    public SearchCount start(OffsetDateTime start) {
        this.start = start;
        return this;
    }

    /**
     * The start time of the bucket.
     * @return start
     **/
    @NotNull
    @JsonProperty(JSON_PROPERTY_START)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd'T'HH:mm:ss.SSSXXXX")
    public OffsetDateTime getStart() {
        return start;
    }

    @JsonProperty(JSON_PROPERTY_START)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd'T'HH:mm:ss.SSSXXXX")
    public void setStart(OffsetDateTime start) {
        this.start = start;
    }

    public SearchCount tweetCount(Integer tweetCount) {
        this.tweetCount = tweetCount;
        return this;
    }

    /**
     * The count for the bucket.
     * @return tweetCount
     **/
    @NotNull
    @JsonProperty(JSON_PROPERTY_TWEET_COUNT)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public Integer getTweetCount() {
        return tweetCount;
    }

    @JsonProperty(JSON_PROPERTY_TWEET_COUNT)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setTweetCount(Integer tweetCount) {
        this.tweetCount = tweetCount;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SearchCount searchCount = (SearchCount) o;
        return Objects.equals(this.end, searchCount.end) &&
            Objects.equals(this.start, searchCount.start) &&
            Objects.equals(this.tweetCount, searchCount.tweetCount);
    }

    @Override
    public int hashCode() {
        return Objects.hash(end, start, tweetCount);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class SearchCount {\n");
        sb.append("    end: ").append(toIndentedString(end)).append("\n");
        sb.append("    start: ").append(toIndentedString(start)).append("\n");
        sb.append("    tweetCount: ").append(toIndentedString(tweetCount)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

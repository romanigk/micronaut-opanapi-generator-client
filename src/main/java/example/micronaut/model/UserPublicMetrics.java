/*
 * Twitter API v2
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.55
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package example.micronaut.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.*;

import javax.validation.constraints.*;
import javax.validation.Valid;
import io.micronaut.core.annotation.*;
import javax.annotation.Generated;

/**
 * A list of metrics for this User.
 */
@JsonPropertyOrder({
  UserPublicMetrics.JSON_PROPERTY_FOLLOWERS_COUNT,
  UserPublicMetrics.JSON_PROPERTY_FOLLOWING_COUNT,
  UserPublicMetrics.JSON_PROPERTY_LISTED_COUNT,
  UserPublicMetrics.JSON_PROPERTY_TWEET_COUNT
})
@JsonTypeName("User_public_metrics")
@Generated(value="org.openapitools.codegen.languages.JavaMicronautClientCodegen", date="2022-11-05T03:44:30.749524299+01:00[Europe/Berlin]")
@Introspected
public class UserPublicMetrics {
    public static final String JSON_PROPERTY_FOLLOWERS_COUNT = "followers_count";
    private Integer followersCount;

    public static final String JSON_PROPERTY_FOLLOWING_COUNT = "following_count";
    private Integer followingCount;

    public static final String JSON_PROPERTY_LISTED_COUNT = "listed_count";
    private Integer listedCount;

    public static final String JSON_PROPERTY_TWEET_COUNT = "tweet_count";
    private Integer tweetCount;

    public UserPublicMetrics(Integer followersCount, Integer followingCount, Integer listedCount, Integer tweetCount) {
        this.followersCount = followersCount;
        this.followingCount = followingCount;
        this.listedCount = listedCount;
        this.tweetCount = tweetCount;
    }

    public UserPublicMetrics followersCount(Integer followersCount) {
        this.followersCount = followersCount;
        return this;
    }

    /**
     * Number of Users who are following this User.
     * @return followersCount
     **/
    @NotNull
    @JsonProperty(JSON_PROPERTY_FOLLOWERS_COUNT)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public Integer getFollowersCount() {
        return followersCount;
    }

    @JsonProperty(JSON_PROPERTY_FOLLOWERS_COUNT)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setFollowersCount(Integer followersCount) {
        this.followersCount = followersCount;
    }

    public UserPublicMetrics followingCount(Integer followingCount) {
        this.followingCount = followingCount;
        return this;
    }

    /**
     * Number of Users this User is following.
     * @return followingCount
     **/
    @NotNull
    @JsonProperty(JSON_PROPERTY_FOLLOWING_COUNT)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public Integer getFollowingCount() {
        return followingCount;
    }

    @JsonProperty(JSON_PROPERTY_FOLLOWING_COUNT)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setFollowingCount(Integer followingCount) {
        this.followingCount = followingCount;
    }

    public UserPublicMetrics listedCount(Integer listedCount) {
        this.listedCount = listedCount;
        return this;
    }

    /**
     * The number of lists that include this User.
     * @return listedCount
     **/
    @NotNull
    @JsonProperty(JSON_PROPERTY_LISTED_COUNT)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public Integer getListedCount() {
        return listedCount;
    }

    @JsonProperty(JSON_PROPERTY_LISTED_COUNT)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setListedCount(Integer listedCount) {
        this.listedCount = listedCount;
    }

    public UserPublicMetrics tweetCount(Integer tweetCount) {
        this.tweetCount = tweetCount;
        return this;
    }

    /**
     * The number of Tweets (including Retweets) posted by this User.
     * @return tweetCount
     **/
    @NotNull
    @JsonProperty(JSON_PROPERTY_TWEET_COUNT)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public Integer getTweetCount() {
        return tweetCount;
    }

    @JsonProperty(JSON_PROPERTY_TWEET_COUNT)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setTweetCount(Integer tweetCount) {
        this.tweetCount = tweetCount;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        UserPublicMetrics userPublicMetrics = (UserPublicMetrics) o;
        return Objects.equals(this.followersCount, userPublicMetrics.followersCount) &&
            Objects.equals(this.followingCount, userPublicMetrics.followingCount) &&
            Objects.equals(this.listedCount, userPublicMetrics.listedCount) &&
            Objects.equals(this.tweetCount, userPublicMetrics.tweetCount);
    }

    @Override
    public int hashCode() {
        return Objects.hash(followersCount, followingCount, listedCount, tweetCount);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class UserPublicMetrics {\n");
        sb.append("    followersCount: ").append(toIndentedString(followersCount)).append("\n");
        sb.append("    followingCount: ").append(toIndentedString(followingCount)).append("\n");
        sb.append("    listedCount: ").append(toIndentedString(listedCount)).append("\n");
        sb.append("    tweetCount: ").append(toIndentedString(tweetCount)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

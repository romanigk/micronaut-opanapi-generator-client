/*
 * Twitter API v2
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.55
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package example.micronaut.model;

import java.util.Objects;
import java.util.Arrays;
import example.micronaut.model.Point;
import java.util.ArrayList;
import java.util.List;
import com.fasterxml.jackson.annotation.*;

import javax.validation.constraints.*;
import javax.validation.Valid;
import io.micronaut.core.annotation.*;
import javax.annotation.Generated;

/**
 * Geo
 */
@JsonPropertyOrder({
  Geo.JSON_PROPERTY_BBOX,
  Geo.JSON_PROPERTY_GEOMETRY,
  Geo.JSON_PROPERTY_PROPERTIES,
  Geo.JSON_PROPERTY_TYPE
})
@JsonTypeName("Geo")
@Generated(value="org.openapitools.codegen.languages.JavaMicronautClientCodegen", date="2022-11-05T03:44:30.749524299+01:00[Europe/Berlin]")
@Introspected
public class Geo {
    public static final String JSON_PROPERTY_BBOX = "bbox";
    private List<Double> bbox = new ArrayList<>();

    public static final String JSON_PROPERTY_GEOMETRY = "geometry";
    private Point geometry;

    public static final String JSON_PROPERTY_PROPERTIES = "properties";
    private Object properties;

    /**
     * Gets or Sets type
     */
    public enum TypeEnum {
        FEATURE("Feature");

        private String value;

        TypeEnum(String value) {
            this.value = value;
        }

        @JsonValue
        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        @JsonCreator
        public static TypeEnum fromValue(String value) {
            for (TypeEnum b : TypeEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }
    }
    public static final String JSON_PROPERTY_TYPE = "type";
    private TypeEnum type;

    public Geo(List<Double> bbox, Object properties, TypeEnum type) {
        this.bbox = bbox;
        this.properties = properties;
        this.type = type;
    }

    public Geo bbox(List<Double> bbox) {
        this.bbox = bbox;
        return this;
    }

    public Geo addBboxItem(Double bboxItem) {
        this.bbox.add(bboxItem);
        return this;
    }

    /**
     * Get bbox
     * @return bbox
     **/
    @NotNull
    @Size(min=4, max=4)
    @JsonProperty(JSON_PROPERTY_BBOX)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public List<Double> getBbox() {
        return bbox;
    }

    @JsonProperty(JSON_PROPERTY_BBOX)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setBbox(List<Double> bbox) {
        this.bbox = bbox;
    }

    public Geo geometry(Point geometry) {
        this.geometry = geometry;
        return this;
    }

    /**
     * Get geometry
     * @return geometry
     **/
    @Valid
    @Nullable
    @JsonProperty(JSON_PROPERTY_GEOMETRY)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Point getGeometry() {
        return geometry;
    }

    @JsonProperty(JSON_PROPERTY_GEOMETRY)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setGeometry(Point geometry) {
        this.geometry = geometry;
    }

    public Geo properties(Object properties) {
        this.properties = properties;
        return this;
    }

    /**
     * Get properties
     * @return properties
     **/
    @NotNull
    @JsonProperty(JSON_PROPERTY_PROPERTIES)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public Object getProperties() {
        return properties;
    }

    @JsonProperty(JSON_PROPERTY_PROPERTIES)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setProperties(Object properties) {
        this.properties = properties;
    }

    public Geo type(TypeEnum type) {
        this.type = type;
        return this;
    }

    /**
     * Get type
     * @return type
     **/
    @NotNull
    @JsonProperty(JSON_PROPERTY_TYPE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public TypeEnum getType() {
        return type;
    }

    @JsonProperty(JSON_PROPERTY_TYPE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setType(TypeEnum type) {
        this.type = type;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Geo geo = (Geo) o;
        return Objects.equals(this.bbox, geo.bbox) &&
            Objects.equals(this.geometry, geo.geometry) &&
            Objects.equals(this.properties, geo.properties) &&
            Objects.equals(this.type, geo.type);
    }

    @Override
    public int hashCode() {
        return Objects.hash(bbox, geometry, properties, type);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class Geo {\n");
        sb.append("    bbox: ").append(toIndentedString(bbox)).append("\n");
        sb.append("    geometry: ").append(toIndentedString(geometry)).append("\n");
        sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
        sb.append("    type: ").append(toIndentedString(type)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

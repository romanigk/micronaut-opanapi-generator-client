/*
 * Twitter API v2
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.55
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package example.micronaut.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.LinkedHashSet;
import java.util.Set;
import com.fasterxml.jackson.annotation.*;

import javax.validation.constraints.*;
import javax.validation.Valid;
import io.micronaut.core.annotation.*;
import javax.annotation.Generated;

/**
 * Indicates withholding details for [withheld content](https://help.twitter.com/en/rules-and-policies/tweet-withheld-by-country).
 */
@JsonPropertyOrder({
  TweetWithheld.JSON_PROPERTY_COPYRIGHT,
  TweetWithheld.JSON_PROPERTY_COUNTRY_CODES,
  TweetWithheld.JSON_PROPERTY_SCOPE
})
@JsonTypeName("TweetWithheld")
@Generated(value="org.openapitools.codegen.languages.JavaMicronautClientCodegen", date="2022-11-05T03:44:30.749524299+01:00[Europe/Berlin]")
@Introspected
public class TweetWithheld {
    public static final String JSON_PROPERTY_COPYRIGHT = "copyright";
    private Boolean copyright;

    public static final String JSON_PROPERTY_COUNTRY_CODES = "country_codes";
    private Set<String> countryCodes = new LinkedHashSet<>();

    /**
     * Indicates whether the content being withheld is the &#x60;tweet&#x60; or a &#x60;user&#x60;.
     */
    public enum ScopeEnum {
        TWEET("tweet"),
        USER("user");

        private String value;

        ScopeEnum(String value) {
            this.value = value;
        }

        @JsonValue
        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        @JsonCreator
        public static ScopeEnum fromValue(String value) {
            for (ScopeEnum b : ScopeEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }
    }
    public static final String JSON_PROPERTY_SCOPE = "scope";
    private ScopeEnum scope;

    public TweetWithheld(Boolean copyright, Set<String> countryCodes) {
        this.copyright = copyright;
        this.countryCodes = countryCodes;
    }

    public TweetWithheld copyright(Boolean copyright) {
        this.copyright = copyright;
        return this;
    }

    /**
     * Indicates if the content is being withheld for on the basis of copyright infringement.
     * @return copyright
     **/
    @NotNull
    @JsonProperty(JSON_PROPERTY_COPYRIGHT)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public Boolean getCopyright() {
        return copyright;
    }

    @JsonProperty(JSON_PROPERTY_COPYRIGHT)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setCopyright(Boolean copyright) {
        this.copyright = copyright;
    }

    public TweetWithheld countryCodes(Set<String> countryCodes) {
        this.countryCodes = countryCodes;
        return this;
    }

    public TweetWithheld addCountryCodesItem(String countryCodesItem) {
        this.countryCodes.add(countryCodesItem);
        return this;
    }

    /**
     * Provides a list of countries where this content is not available.
     * @return countryCodes
     **/
    @NotNull
    @Size(min=1)
    @JsonProperty(JSON_PROPERTY_COUNTRY_CODES)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public Set<String> getCountryCodes() {
        return countryCodes;
    }

    @JsonProperty(JSON_PROPERTY_COUNTRY_CODES)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
       @JsonDeserialize(as = LinkedHashSet.class)
    public void setCountryCodes(Set<String> countryCodes) {
        this.countryCodes = countryCodes;
    }

    public TweetWithheld scope(ScopeEnum scope) {
        this.scope = scope;
        return this;
    }

    /**
     * Indicates whether the content being withheld is the &#x60;tweet&#x60; or a &#x60;user&#x60;.
     * @return scope
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_SCOPE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public ScopeEnum getScope() {
        return scope;
    }

    @JsonProperty(JSON_PROPERTY_SCOPE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setScope(ScopeEnum scope) {
        this.scope = scope;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        TweetWithheld tweetWithheld = (TweetWithheld) o;
        return Objects.equals(this.copyright, tweetWithheld.copyright) &&
            Objects.equals(this.countryCodes, tweetWithheld.countryCodes) &&
            Objects.equals(this.scope, tweetWithheld.scope);
    }

    @Override
    public int hashCode() {
        return Objects.hash(copyright, countryCodes, scope);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class TweetWithheld {\n");
        sb.append("    copyright: ").append(toIndentedString(copyright)).append("\n");
        sb.append("    countryCodes: ").append(toIndentedString(countryCodes)).append("\n");
        sb.append("    scope: ").append(toIndentedString(scope)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

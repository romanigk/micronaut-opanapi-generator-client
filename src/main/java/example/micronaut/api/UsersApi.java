/*
 * Twitter API v2
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.55
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package example.micronaut.api;

import io.micronaut.http.annotation.*;
import io.micronaut.core.annotation.*;
import io.micronaut.http.client.annotation.Client;
import io.micronaut.core.convert.format.Format;
import reactor.core.publisher.Mono;
import example.micronaut.model.BlockUserMutationResponse;
import example.micronaut.model.BlockUserRequest;
import example.micronaut.model.Error;
import example.micronaut.model.Get2ListsIdFollowersResponse;
import example.micronaut.model.Get2ListsIdMembersResponse;
import example.micronaut.model.Get2TweetsIdLikingUsersResponse;
import example.micronaut.model.Get2TweetsIdRetweetedByResponse;
import example.micronaut.model.Get2UsersByResponse;
import example.micronaut.model.Get2UsersByUsernameUsernameResponse;
import example.micronaut.model.Get2UsersIdBlockingResponse;
import example.micronaut.model.Get2UsersIdFollowersResponse;
import example.micronaut.model.Get2UsersIdFollowingResponse;
import example.micronaut.model.Get2UsersIdMutingResponse;
import example.micronaut.model.Get2UsersIdResponse;
import example.micronaut.model.Get2UsersMeResponse;
import example.micronaut.model.Get2UsersResponse;
import example.micronaut.model.MuteUserMutationResponse;
import example.micronaut.model.MuteUserRequest;
import example.micronaut.model.Problem;
import java.util.Set;
import example.micronaut.model.UsersFollowingCreateRequest;
import example.micronaut.model.UsersFollowingCreateResponse;
import example.micronaut.model.UsersFollowingDeleteResponse;
import javax.annotation.Generated;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;
import javax.validation.constraints.*;

@Generated(value="org.openapitools.codegen.languages.JavaMicronautClientCodegen", date="2022-11-05T03:44:30.749524299+01:00[Europe/Berlin]")
@Client("${openapi-micronaut-client-base-path}")
public interface UsersApi {
    /**
     * User lookup me
     * This endpoint returns information about the requesting User.
     *
     * @param userFields A comma separated list of User fields to display. (optional)
     * @param expansions A comma separated list of fields to expand. (optional)
     * @param tweetFields A comma separated list of Tweet fields to display. (optional)
     * @return Get2UsersMeResponse
     * 
     * @see <a href="https://developer.twitter.com/en/docs/twitter-api/users/lookup/api-reference/get-users-me">User lookup me Documentation</a>
     */
    @Get(uri="/2/users/me")
    @Consumes({"application/json", "application/problem+json"})
    Mono<Get2UsersMeResponse> findMyUser(
        @QueryValue(value="user.fields") @Nullable @Size(min=1) Set<String> userFields, 
        @QueryValue(value="expansions") @Nullable @Size(min=1) Set<String> expansions, 
        @QueryValue(value="tweet.fields") @Nullable @Size(min=1) Set<String> tweetFields
    );

    /**
     * User lookup by ID
     * This endpoint returns information about a User. Specify User by ID.
     *
     * @param id The ID of the User to lookup. (required)
     * @param userFields A comma separated list of User fields to display. (optional)
     * @param expansions A comma separated list of fields to expand. (optional)
     * @param tweetFields A comma separated list of Tweet fields to display. (optional)
     * @return Get2UsersIdResponse
     * 
     * @see <a href="https://developer.twitter.com/en/docs/twitter-api/users/lookup/api-reference/get-users-id">User lookup by ID Documentation</a>
     */
    @Get(uri="/2/users/{id}")
    @Consumes({"application/json", "application/problem+json"})
    Mono<Get2UsersIdResponse> findUserById(
        @PathVariable(name="id") @NotNull @Pattern(regexp="^[0-9]{1,19}$") String id, 
        @QueryValue(value="user.fields") @Nullable @Size(min=1) Set<String> userFields, 
        @QueryValue(value="expansions") @Nullable @Size(min=1) Set<String> expansions, 
        @QueryValue(value="tweet.fields") @Nullable @Size(min=1) Set<String> tweetFields
    );

    /**
     * User lookup by username
     * This endpoint returns information about a User. Specify User by username.
     *
     * @param username A username. (required)
     * @param userFields A comma separated list of User fields to display. (optional)
     * @param expansions A comma separated list of fields to expand. (optional)
     * @param tweetFields A comma separated list of Tweet fields to display. (optional)
     * @return Get2UsersByUsernameUsernameResponse
     * 
     * @see <a href="https://developer.twitter.com/en/docs/twitter-api/users/lookup/api-reference/get-users-by-username-username">User lookup by username Documentation</a>
     */
    @Get(uri="/2/users/by/username/{username}")
    @Consumes({"application/json", "application/problem+json"})
    Mono<Get2UsersByUsernameUsernameResponse> findUserByUsername(
        @PathVariable(name="username") @NotNull @Pattern(regexp="^[A-Za-z0-9_]{1,15}$") String username, 
        @QueryValue(value="user.fields") @Nullable @Size(min=1) Set<String> userFields, 
        @QueryValue(value="expansions") @Nullable @Size(min=1) Set<String> expansions, 
        @QueryValue(value="tweet.fields") @Nullable @Size(min=1) Set<String> tweetFields
    );

    /**
     * User lookup by IDs
     * This endpoint returns information about Users. Specify Users by their ID.
     *
     * @param ids A list of User IDs, comma-separated. You can specify up to 100 IDs. (required)
     * @param userFields A comma separated list of User fields to display. (optional)
     * @param expansions A comma separated list of fields to expand. (optional)
     * @param tweetFields A comma separated list of Tweet fields to display. (optional)
     * @return Get2UsersResponse
     * 
     * @see <a href="https://developer.twitter.com/en/docs/twitter-api/users/lookup/api-reference/get-users">User lookup by IDs Documentation</a>
     */
    @Get(uri="/2/users")
    @Consumes({"application/json", "application/problem+json"})
    Mono<Get2UsersResponse> findUsersById(
        @QueryValue(value="ids") @NotNull @Size(min=1, max=100) List<String> ids, 
        @QueryValue(value="user.fields") @Nullable @Size(min=1) Set<String> userFields, 
        @QueryValue(value="expansions") @Nullable @Size(min=1) Set<String> expansions, 
        @QueryValue(value="tweet.fields") @Nullable @Size(min=1) Set<String> tweetFields
    );

    /**
     * User lookup by usernames
     * This endpoint returns information about Users. Specify Users by their username.
     *
     * @param usernames A list of usernames, comma-separated. (required)
     * @param userFields A comma separated list of User fields to display. (optional)
     * @param expansions A comma separated list of fields to expand. (optional)
     * @param tweetFields A comma separated list of Tweet fields to display. (optional)
     * @return Get2UsersByResponse
     * 
     * @see <a href="https://developer.twitter.com/en/docs/twitter-api/users/lookup/api-reference/get-users-by">User lookup by usernames Documentation</a>
     */
    @Get(uri="/2/users/by")
    @Consumes({"application/json", "application/problem+json"})
    Mono<Get2UsersByResponse> findUsersByUsername(
        @QueryValue(value="usernames") @NotNull @Size(min=1, max=100) List<String> usernames, 
        @QueryValue(value="user.fields") @Nullable @Size(min=1) Set<String> userFields, 
        @QueryValue(value="expansions") @Nullable @Size(min=1) Set<String> expansions, 
        @QueryValue(value="tweet.fields") @Nullable @Size(min=1) Set<String> tweetFields
    );

    /**
     * Returns User objects that follow a List by the provided List ID
     * Returns a list of Users that follow a List by the provided List ID
     *
     * @param id The ID of the List. (required)
     * @param maxResults The maximum number of results. (optional, default to 100)
     * @param paginationToken This parameter is used to get a specified &#39;page&#39; of results. (optional)
     * @param userFields A comma separated list of User fields to display. (optional)
     * @param expansions A comma separated list of fields to expand. (optional)
     * @param tweetFields A comma separated list of Tweet fields to display. (optional)
     * @return Get2ListsIdFollowersResponse
     * 
     * @see <a href="https://developer.twitter.com/en/docs/twitter-api/users/follows/api-reference/get-users-id-followers">Returns User objects that follow a List by the provided List ID Documentation</a>
     */
    @Get(uri="/2/lists/{id}/followers")
    @Consumes({"application/json", "application/problem+json"})
    Mono<Get2ListsIdFollowersResponse> listGetFollowers(
        @PathVariable(name="id") @NotNull @Pattern(regexp="^[0-9]{1,19}$") String id, 
        @QueryValue(value="max_results", defaultValue="100") @Nullable @Min(1) @Max(100) Integer maxResults, 
        @QueryValue(value="pagination_token") @Nullable @Size(min=1, max=19) String paginationToken, 
        @QueryValue(value="user.fields") @Nullable @Size(min=1) Set<String> userFields, 
        @QueryValue(value="expansions") @Nullable @Size(min=1) Set<String> expansions, 
        @QueryValue(value="tweet.fields") @Nullable @Size(min=1) Set<String> tweetFields
    );

    /**
     * Returns User objects that are members of a List by the provided List ID.
     * Returns a list of Users that are members of a List by the provided List ID.
     *
     * @param id The ID of the List. (required)
     * @param maxResults The maximum number of results. (optional, default to 100)
     * @param paginationToken This parameter is used to get a specified &#39;page&#39; of results. (optional)
     * @param userFields A comma separated list of User fields to display. (optional)
     * @param expansions A comma separated list of fields to expand. (optional)
     * @param tweetFields A comma separated list of Tweet fields to display. (optional)
     * @return Get2ListsIdMembersResponse
     * 
     * @see <a href="https://developer.twitter.com/en/docs/twitter-api/lists/list-members/api-reference/get-users-id-list_memberships">Returns User objects that are members of a List by the provided List ID. Documentation</a>
     */
    @Get(uri="/2/lists/{id}/members")
    @Consumes({"application/json", "application/problem+json"})
    Mono<Get2ListsIdMembersResponse> listGetMembers(
        @PathVariable(name="id") @NotNull @Pattern(regexp="^[0-9]{1,19}$") String id, 
        @QueryValue(value="max_results", defaultValue="100") @Nullable @Min(1) @Max(100) Integer maxResults, 
        @QueryValue(value="pagination_token") @Nullable @Size(min=1, max=19) String paginationToken, 
        @QueryValue(value="user.fields") @Nullable @Size(min=1) Set<String> userFields, 
        @QueryValue(value="expansions") @Nullable @Size(min=1) Set<String> expansions, 
        @QueryValue(value="tweet.fields") @Nullable @Size(min=1) Set<String> tweetFields
    );

    /**
     * Returns User objects that have liked the provided Tweet ID
     * Returns a list of Users that have liked the provided Tweet ID
     *
     * @param id A single Tweet ID. (required)
     * @param maxResults The maximum number of results. (optional, default to 100)
     * @param paginationToken This parameter is used to get the next &#39;page&#39; of results. (optional)
     * @param userFields A comma separated list of User fields to display. (optional)
     * @param expansions A comma separated list of fields to expand. (optional)
     * @param tweetFields A comma separated list of Tweet fields to display. (optional)
     * @return Get2TweetsIdLikingUsersResponse
     * 
     * @see <a href="https://developer.twitter.com/en/docs/twitter-api/tweets/likes/api-reference/get-tweets-id-liking_users">Returns User objects that have liked the provided Tweet ID Documentation</a>
     */
    @Get(uri="/2/tweets/{id}/liking_users")
    @Consumes({"application/json", "application/problem+json"})
    Mono<Get2TweetsIdLikingUsersResponse> tweetsIdLikingUsers(
        @PathVariable(name="id") @NotNull @Pattern(regexp="^[0-9]{1,19}$") String id, 
        @QueryValue(value="max_results", defaultValue="100") @Nullable @Min(1) @Max(100) Integer maxResults, 
        @QueryValue(value="pagination_token") @Nullable @Size(min=1) String paginationToken, 
        @QueryValue(value="user.fields") @Nullable @Size(min=1) Set<String> userFields, 
        @QueryValue(value="expansions") @Nullable @Size(min=1) Set<String> expansions, 
        @QueryValue(value="tweet.fields") @Nullable @Size(min=1) Set<String> tweetFields
    );

    /**
     * Returns User objects that have retweeted the provided Tweet ID
     * Returns a list of Users that have retweeted the provided Tweet ID
     *
     * @param id A single Tweet ID. (required)
     * @param maxResults The maximum number of results. (optional, default to 100)
     * @param paginationToken This parameter is used to get the next &#39;page&#39; of results. (optional)
     * @param userFields A comma separated list of User fields to display. (optional)
     * @param expansions A comma separated list of fields to expand. (optional)
     * @param tweetFields A comma separated list of Tweet fields to display. (optional)
     * @return Get2TweetsIdRetweetedByResponse
     * 
     * @see <a href="https://developer.twitter.com/en/docs/twitter-api/tweets/retweets/api-reference/get-tweets-id-retweeted_by">Returns User objects that have retweeted the provided Tweet ID Documentation</a>
     */
    @Get(uri="/2/tweets/{id}/retweeted_by")
    @Consumes({"application/json", "application/problem+json"})
    Mono<Get2TweetsIdRetweetedByResponse> tweetsIdRetweetingUsers(
        @PathVariable(name="id") @NotNull @Pattern(regexp="^[0-9]{1,19}$") String id, 
        @QueryValue(value="max_results", defaultValue="100") @Nullable @Min(1) @Max(100) Integer maxResults, 
        @QueryValue(value="pagination_token") @Nullable @Size(min=1) String paginationToken, 
        @QueryValue(value="user.fields") @Nullable @Size(min=1) Set<String> userFields, 
        @QueryValue(value="expansions") @Nullable @Size(min=1) Set<String> expansions, 
        @QueryValue(value="tweet.fields") @Nullable @Size(min=1) Set<String> tweetFields
    );

    /**
     * Block User by User ID
     * Causes the User (in the path) to block the target User. The User (in the path) must match the User context authorizing the request
     *
     * @param id The ID of the authenticated source User that is requesting to block the target User. (required)
     * @param blockUserRequest  (required)
     * @return BlockUserMutationResponse
     * 
     * @see <a href="https://developer.twitter.com/en/docs/twitter-api/users/blocks/api-reference/post-users-user_id-blocking">Block User by User ID Documentation</a>
     */
    @Post(uri="/2/users/{id}/blocking")
    @Consumes({"application/json", "application/problem+json"})
    @Produces({"application/json"})
    Mono<BlockUserMutationResponse> usersIdBlock(
        @PathVariable(name="id") @NotNull String id, 
        @Body @NotNull @Valid BlockUserRequest blockUserRequest
    );

    /**
     * Returns User objects that are blocked by provided User ID
     * Returns a list of Users that are blocked by the provided User ID
     *
     * @param id The ID of the authenticated source User for whom to return results. (required)
     * @param maxResults The maximum number of results. (optional)
     * @param paginationToken This parameter is used to get a specified &#39;page&#39; of results. (optional)
     * @param userFields A comma separated list of User fields to display. (optional)
     * @param expansions A comma separated list of fields to expand. (optional)
     * @param tweetFields A comma separated list of Tweet fields to display. (optional)
     * @return Get2UsersIdBlockingResponse
     * 
     * @see <a href="https://developer.twitter.com/en/docs/twitter-api/users/blocks/api-reference/get-users-blocking">Returns User objects that are blocked by provided User ID Documentation</a>
     */
    @Get(uri="/2/users/{id}/blocking")
    @Consumes({"application/json", "application/problem+json"})
    Mono<Get2UsersIdBlockingResponse> usersIdBlocking(
        @PathVariable(name="id") @NotNull String id, 
        @QueryValue(value="max_results") @Nullable @Min(1) @Max(1000) Integer maxResults, 
        @QueryValue(value="pagination_token") @Nullable @Size(min=16) String paginationToken, 
        @QueryValue(value="user.fields") @Nullable @Size(min=1) Set<String> userFields, 
        @QueryValue(value="expansions") @Nullable @Size(min=1) Set<String> expansions, 
        @QueryValue(value="tweet.fields") @Nullable @Size(min=1) Set<String> tweetFields
    );

    /**
     * Follow User
     * Causes the User(in the path) to follow, or “request to follow” for protected Users, the target User. The User(in the path) must match the User context authorizing the request
     *
     * @param id The ID of the authenticated source User that is requesting to follow the target User. (required)
     * @param usersFollowingCreateRequest  (optional)
     * @return UsersFollowingCreateResponse
     * 
     * @see <a href="https://developer.twitter.com/en/docs/twitter-api/users/follows/api-reference/post-users-source_user_id-following">Follow User Documentation</a>
     */
    @Post(uri="/2/users/{id}/following")
    @Consumes({"application/json", "application/problem+json"})
    @Produces({"application/json"})
    Mono<UsersFollowingCreateResponse> usersIdFollow(
        @PathVariable(name="id") @NotNull String id, 
        @Body @Nullable @Valid UsersFollowingCreateRequest usersFollowingCreateRequest
    );

    /**
     * Followers by User ID
     * Returns a list of Users who are followers of the specified User ID.
     *
     * @param id The ID of the User to lookup. (required)
     * @param maxResults The maximum number of results. (optional)
     * @param paginationToken This parameter is used to get a specified &#39;page&#39; of results. (optional)
     * @param userFields A comma separated list of User fields to display. (optional)
     * @param expansions A comma separated list of fields to expand. (optional)
     * @param tweetFields A comma separated list of Tweet fields to display. (optional)
     * @return Get2UsersIdFollowersResponse
     * 
     * @see <a href="https://developer.twitter.com/en/docs/twitter-api/users/follows/api-reference/get-users-id-followers">Followers by User ID Documentation</a>
     */
    @Get(uri="/2/users/{id}/followers")
    @Consumes({"application/json", "application/problem+json"})
    Mono<Get2UsersIdFollowersResponse> usersIdFollowers(
        @PathVariable(name="id") @NotNull @Pattern(regexp="^[0-9]{1,19}$") String id, 
        @QueryValue(value="max_results") @Nullable @Min(1) @Max(1000) Integer maxResults, 
        @QueryValue(value="pagination_token") @Nullable @Size(min=16) String paginationToken, 
        @QueryValue(value="user.fields") @Nullable @Size(min=1) Set<String> userFields, 
        @QueryValue(value="expansions") @Nullable @Size(min=1) Set<String> expansions, 
        @QueryValue(value="tweet.fields") @Nullable @Size(min=1) Set<String> tweetFields
    );

    /**
     * Following by User ID
     * Returns a list of Users that are being followed by the provided User ID
     *
     * @param id The ID of the User to lookup. (required)
     * @param maxResults The maximum number of results. (optional)
     * @param paginationToken This parameter is used to get a specified &#39;page&#39; of results. (optional)
     * @param userFields A comma separated list of User fields to display. (optional)
     * @param expansions A comma separated list of fields to expand. (optional)
     * @param tweetFields A comma separated list of Tweet fields to display. (optional)
     * @return Get2UsersIdFollowingResponse
     * 
     * @see <a href="https://developer.twitter.com/en/docs/twitter-api/users/follows/api-reference/get-users-id-following">Following by User ID Documentation</a>
     */
    @Get(uri="/2/users/{id}/following")
    @Consumes({"application/json", "application/problem+json"})
    Mono<Get2UsersIdFollowingResponse> usersIdFollowing(
        @PathVariable(name="id") @NotNull @Pattern(regexp="^[0-9]{1,19}$") String id, 
        @QueryValue(value="max_results") @Nullable @Min(1) @Max(1000) Integer maxResults, 
        @QueryValue(value="pagination_token") @Nullable @Size(min=16) String paginationToken, 
        @QueryValue(value="user.fields") @Nullable @Size(min=1) Set<String> userFields, 
        @QueryValue(value="expansions") @Nullable @Size(min=1) Set<String> expansions, 
        @QueryValue(value="tweet.fields") @Nullable @Size(min=1) Set<String> tweetFields
    );

    /**
     * Mute User by User ID.
     * Causes the User (in the path) to mute the target User. The User (in the path) must match the User context authorizing the request.
     *
     * @param id The ID of the authenticated source User that is requesting to mute the target User. (required)
     * @param muteUserRequest  (optional)
     * @return MuteUserMutationResponse
     * 
     * @see <a href="https://developer.twitter.com/en/docs/twitter-api/users/mutes/api-reference/post-users-user_id-muting">Mute User by User ID. Documentation</a>
     */
    @Post(uri="/2/users/{id}/muting")
    @Consumes({"application/json", "application/problem+json"})
    @Produces({"application/json"})
    Mono<MuteUserMutationResponse> usersIdMute(
        @PathVariable(name="id") @NotNull String id, 
        @Body @Nullable @Valid MuteUserRequest muteUserRequest
    );

    /**
     * Returns User objects that are muted by the provided User ID
     * Returns a list of Users that are muted by the provided User ID
     *
     * @param id The ID of the authenticated source User for whom to return results. (required)
     * @param maxResults The maximum number of results. (optional, default to 100)
     * @param paginationToken This parameter is used to get the next &#39;page&#39; of results. (optional)
     * @param userFields A comma separated list of User fields to display. (optional)
     * @param expansions A comma separated list of fields to expand. (optional)
     * @param tweetFields A comma separated list of Tweet fields to display. (optional)
     * @return Get2UsersIdMutingResponse
     * 
     * @see <a href="https://developer.twitter.com/en/docs/twitter-api/users/mutes/api-reference/get-users-muting">Returns User objects that are muted by the provided User ID Documentation</a>
     */
    @Get(uri="/2/users/{id}/muting")
    @Consumes({"application/json", "application/problem+json"})
    Mono<Get2UsersIdMutingResponse> usersIdMuting(
        @PathVariable(name="id") @NotNull String id, 
        @QueryValue(value="max_results", defaultValue="100") @Nullable @Min(1) @Max(1000) Integer maxResults, 
        @QueryValue(value="pagination_token") @Nullable @Size(min=1, max=19) String paginationToken, 
        @QueryValue(value="user.fields") @Nullable @Size(min=1) Set<String> userFields, 
        @QueryValue(value="expansions") @Nullable @Size(min=1) Set<String> expansions, 
        @QueryValue(value="tweet.fields") @Nullable @Size(min=1) Set<String> tweetFields
    );

    /**
     * Unblock User by User ID
     * Causes the source User to unblock the target User. The source User must match the User context authorizing the request
     *
     * @param sourceUserId The ID of the authenticated source User that is requesting to unblock the target User. (required)
     * @param targetUserId The ID of the User that the source User is requesting to unblock. (required)
     * @return BlockUserMutationResponse
     * 
     * @see <a href="https://developer.twitter.com/en/docs/twitter-api/users/blocks/api-reference/delete-users-user_id-blocking">Unblock User by User ID Documentation</a>
     */
    @Delete(uri="/2/users/{source_user_id}/blocking/{target_user_id}")
    @Consumes({"application/json", "application/problem+json"})
    Mono<BlockUserMutationResponse> usersIdUnblock(
        @PathVariable(name="source_user_id") @NotNull String sourceUserId, 
        @PathVariable(name="target_user_id") @NotNull @Pattern(regexp="^[0-9]{1,19}$") String targetUserId
    );

    /**
     * Unfollow User
     * Causes the source User to unfollow the target User. The source User must match the User context authorizing the request
     *
     * @param sourceUserId The ID of the authenticated source User that is requesting to unfollow the target User. (required)
     * @param targetUserId The ID of the User that the source User is requesting to unfollow. (required)
     * @return UsersFollowingDeleteResponse
     * 
     * @see <a href="https://developer.twitter.com/en/docs/twitter-api/users/follows/api-reference/delete-users-source_id-following">Unfollow User Documentation</a>
     */
    @Delete(uri="/2/users/{source_user_id}/following/{target_user_id}")
    @Consumes({"application/json", "application/problem+json"})
    Mono<UsersFollowingDeleteResponse> usersIdUnfollow(
        @PathVariable(name="source_user_id") @NotNull String sourceUserId, 
        @PathVariable(name="target_user_id") @NotNull @Pattern(regexp="^[0-9]{1,19}$") String targetUserId
    );

    /**
     * Unmute User by User ID
     * Causes the source User to unmute the target User. The source User must match the User context authorizing the request
     *
     * @param sourceUserId The ID of the authenticated source User that is requesting to unmute the target User. (required)
     * @param targetUserId The ID of the User that the source User is requesting to unmute. (required)
     * @return MuteUserMutationResponse
     * 
     * @see <a href="https://developer.twitter.com/en/docs/twitter-api/users/mutes/api-reference/delete-users-user_id-muting">Unmute User by User ID Documentation</a>
     */
    @Delete(uri="/2/users/{source_user_id}/muting/{target_user_id}")
    @Consumes({"application/json", "application/problem+json"})
    Mono<MuteUserMutationResponse> usersIdUnmute(
        @PathVariable(name="source_user_id") @NotNull String sourceUserId, 
        @PathVariable(name="target_user_id") @NotNull @Pattern(regexp="^[0-9]{1,19}$") String targetUserId
    );

}

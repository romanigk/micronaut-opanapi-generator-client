/*
 * Twitter API v2
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.55
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package example.micronaut.api;

import io.micronaut.http.annotation.*;
import io.micronaut.core.annotation.*;
import io.micronaut.http.client.annotation.Client;
import io.micronaut.core.convert.format.Format;
import reactor.core.publisher.Mono;
import example.micronaut.model.CreateComplianceJobRequest;
import example.micronaut.model.CreateComplianceJobResponse;
import example.micronaut.model.Error;
import example.micronaut.model.Get2ComplianceJobsIdResponse;
import example.micronaut.model.Get2ComplianceJobsResponse;
import java.time.OffsetDateTime;
import example.micronaut.model.Problem;
import java.util.Set;
import example.micronaut.model.TweetComplianceStreamResponse;
import example.micronaut.model.TweetLabelStreamResponse;
import example.micronaut.model.UserComplianceStreamResponse;
import javax.annotation.Generated;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;
import javax.validation.constraints.*;

@Generated(value="org.openapitools.codegen.languages.JavaMicronautClientCodegen", date="2022-11-05T03:44:30.749524299+01:00[Europe/Berlin]")
@Client("${openapi-micronaut-client-base-path}")
public interface ComplianceApi {
    /**
     * Create compliance job
     * Creates a compliance for the given job type
     *
     * @param createComplianceJobRequest  (required)
     * @return CreateComplianceJobResponse
     * 
     * @see <a href="https://developer.twitter.com/en/docs/twitter-api/compliance/batch-compliance/api-reference/post-compliance-jobs">Create compliance job Documentation</a>
     */
    @Post(uri="/2/compliance/jobs")
    @Consumes({"application/json", "application/problem+json"})
    @Produces({"application/json"})
    Mono<CreateComplianceJobResponse> createBatchComplianceJob(
        @Body @NotNull @Valid CreateComplianceJobRequest createComplianceJobRequest
    );

    /**
     * Get Compliance Job
     * Returns a single Compliance Job by ID
     *
     * @param id The ID of the Compliance Job to retrieve. (required)
     * @param complianceJobFields A comma separated list of ComplianceJob fields to display. (optional)
     * @return Get2ComplianceJobsIdResponse
     * 
     * @see <a href="https://developer.twitter.com/en/docs/twitter-api/compliance/batch-compliance/api-reference/get-compliance-jobs-id">Get Compliance Job Documentation</a>
     */
    @Get(uri="/2/compliance/jobs/{id}")
    @Consumes({"application/json", "application/problem+json"})
    Mono<Get2ComplianceJobsIdResponse> getBatchComplianceJob(
        @PathVariable(name="id") @NotNull @Pattern(regexp="^[0-9]{1,19}$") String id, 
        @QueryValue(value="compliance_job.fields") @Nullable @Size(min=1) Set<String> complianceJobFields
    );

    /**
     * Tweets Compliance stream
     * Streams 100% of compliance data for Tweets
     *
     * @param partition The partition number. (required)
     * @param backfillMinutes The number of minutes of backfill requested. (optional)
     * @param startTime YYYY-MM-DDTHH:mm:ssZ. The earliest UTC timestamp from which the Tweet Compliance events will be provided. (optional)
     * @param endTime YYYY-MM-DDTHH:mm:ssZ. The latest UTC timestamp to which the Tweet Compliance events will be provided. (optional)
     * @return TweetComplianceStreamResponse
     */
    @Get(uri="/2/tweets/compliance/stream")
    @Consumes({"application/json", "application/problem+json"})
    Mono<TweetComplianceStreamResponse> getTweetsComplianceStream(
        @QueryValue(value="partition") @NotNull @Min(1) @Max(4) Integer partition, 
        @QueryValue(value="backfill_minutes") @Nullable @Min(0) @Max(5) Integer backfillMinutes, 
        @QueryValue(value="start_time") @Nullable @Format("yyyy-MM-dd'T'HH:mm:ss.SSSXXXX") OffsetDateTime startTime, 
        @QueryValue(value="end_time") @Nullable @Format("yyyy-MM-dd'T'HH:mm:ss.SSSXXXX") OffsetDateTime endTime
    );

    /**
     * Tweets Label stream
     * Streams 100% of labeling events applied to Tweets
     *
     * @param backfillMinutes The number of minutes of backfill requested. (optional)
     * @param startTime YYYY-MM-DDTHH:mm:ssZ. The earliest UTC timestamp from which the Tweet labels will be provided. (optional)
     * @param endTime YYYY-MM-DDTHH:mm:ssZ. The latest UTC timestamp from which the Tweet labels will be provided. (optional)
     * @return TweetLabelStreamResponse
     */
    @Get(uri="/2/tweets/label/stream")
    @Consumes({"application/json", "application/problem+json"})
    Mono<TweetLabelStreamResponse> getTweetsLabelStream(
        @QueryValue(value="backfill_minutes") @Nullable @Min(0) @Max(5) Integer backfillMinutes, 
        @QueryValue(value="start_time") @Nullable @Format("yyyy-MM-dd'T'HH:mm:ss.SSSXXXX") OffsetDateTime startTime, 
        @QueryValue(value="end_time") @Nullable @Format("yyyy-MM-dd'T'HH:mm:ss.SSSXXXX") OffsetDateTime endTime
    );

    /**
     * Users Compliance stream
     * Streams 100% of compliance data for Users
     *
     * @param partition The partition number. (required)
     * @param backfillMinutes The number of minutes of backfill requested. (optional)
     * @param startTime YYYY-MM-DDTHH:mm:ssZ. The earliest UTC timestamp from which the User Compliance events will be provided. (optional)
     * @param endTime YYYY-MM-DDTHH:mm:ssZ. The latest UTC timestamp from which the User Compliance events will be provided. (optional)
     * @return UserComplianceStreamResponse
     */
    @Get(uri="/2/users/compliance/stream")
    @Consumes({"application/json", "application/problem+json"})
    Mono<UserComplianceStreamResponse> getUsersComplianceStream(
        @QueryValue(value="partition") @NotNull @Min(1) @Max(4) Integer partition, 
        @QueryValue(value="backfill_minutes") @Nullable @Min(0) @Max(5) Integer backfillMinutes, 
        @QueryValue(value="start_time") @Nullable @Format("yyyy-MM-dd'T'HH:mm:ss.SSSXXXX") OffsetDateTime startTime, 
        @QueryValue(value="end_time") @Nullable @Format("yyyy-MM-dd'T'HH:mm:ss.SSSXXXX") OffsetDateTime endTime
    );

    /**
     * List Compliance Jobs
     * Returns recent Compliance Jobs for a given job type and optional job status
     *
     * @param type Type of Compliance Job to list. (required)
     * @param status Status of Compliance Job to list. (optional)
     * @param complianceJobFields A comma separated list of ComplianceJob fields to display. (optional)
     * @return Get2ComplianceJobsResponse
     * 
     * @see <a href="https://developer.twitter.com/en/docs/twitter-api/compliance/batch-compliance/api-reference/get-compliance-jobs">List Compliance Jobs Documentation</a>
     */
    @Get(uri="/2/compliance/jobs")
    @Consumes({"application/json", "application/problem+json"})
    Mono<Get2ComplianceJobsResponse> listBatchComplianceJobs(
        @QueryValue(value="type") @NotNull String type, 
        @QueryValue(value="status") @Nullable String status, 
        @QueryValue(value="compliance_job.fields") @Nullable @Size(min=1) Set<String> complianceJobFields
    );

}

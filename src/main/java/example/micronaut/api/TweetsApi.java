/*
 * Twitter API v2
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.55
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package example.micronaut.api;

import io.micronaut.http.annotation.*;
import io.micronaut.core.annotation.*;
import io.micronaut.http.client.annotation.Client;
import io.micronaut.core.convert.format.Format;
import reactor.core.publisher.Mono;
import example.micronaut.model.AddOrDeleteRulesRequest;
import example.micronaut.model.AddOrDeleteRulesResponse;
import example.micronaut.model.Error;
import example.micronaut.model.FilteredStreamingTweetResponse;
import example.micronaut.model.Get2ListsIdTweetsResponse;
import example.micronaut.model.Get2SpacesIdBuyersResponse;
import example.micronaut.model.Get2SpacesIdTweetsResponse;
import example.micronaut.model.Get2TweetsCountsAllResponse;
import example.micronaut.model.Get2TweetsCountsRecentResponse;
import example.micronaut.model.Get2TweetsIdQuoteTweetsResponse;
import example.micronaut.model.Get2TweetsIdResponse;
import example.micronaut.model.Get2TweetsResponse;
import example.micronaut.model.Get2TweetsSample10StreamResponse;
import example.micronaut.model.Get2TweetsSearchAllResponse;
import example.micronaut.model.Get2TweetsSearchRecentResponse;
import example.micronaut.model.Get2UsersIdLikedTweetsResponse;
import example.micronaut.model.Get2UsersIdMentionsResponse;
import example.micronaut.model.Get2UsersIdTimelinesReverseChronologicalResponse;
import example.micronaut.model.Get2UsersIdTweetsResponse;
import java.time.OffsetDateTime;
import example.micronaut.model.Problem;
import example.micronaut.model.RulesLookupResponse;
import java.util.Set;
import example.micronaut.model.StreamingTweetResponse;
import example.micronaut.model.TweetCreateRequest;
import example.micronaut.model.TweetCreateResponse;
import example.micronaut.model.TweetDeleteResponse;
import example.micronaut.model.TweetHideRequest;
import example.micronaut.model.TweetHideResponse;
import example.micronaut.model.UsersLikesCreateRequest;
import example.micronaut.model.UsersLikesCreateResponse;
import example.micronaut.model.UsersLikesDeleteResponse;
import example.micronaut.model.UsersRetweetsCreateRequest;
import example.micronaut.model.UsersRetweetsCreateResponse;
import example.micronaut.model.UsersRetweetsDeleteResponse;
import javax.annotation.Generated;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;
import javax.validation.constraints.*;

@Generated(value="org.openapitools.codegen.languages.JavaMicronautClientCodegen", date="2022-11-05T03:44:30.749524299+01:00[Europe/Berlin]")
@Client("${openapi-micronaut-client-base-path}")
public interface TweetsApi {
    /**
     * Add/Delete rules
     * Add or delete rules from a User&#39;s active rule set. Users can provide unique, optionally tagged rules to add. Users can delete their entire rule set or a subset specified by rule ids or values.
     *
     * @param addOrDeleteRulesRequest  (required)
     * @param dryRun Dry Run can be used with both the add and delete action, with the expected result given, but without actually taking any action in the system (meaning the end state will always be as it was when the request was submitted). This is particularly useful to validate rule changes. (optional)
     * @return AddOrDeleteRulesResponse
     * 
     * @see <a href="https://developer.twitter.com/en/docs/twitter-api/tweets/filtered-stream/api-reference/post-tweets-search-stream-rules">Add/Delete rules Documentation</a>
     */
    @Post(uri="/2/tweets/search/stream/rules")
    @Consumes({"application/json", "application/problem+json"})
    @Produces({"application/json"})
    Mono<AddOrDeleteRulesResponse> addOrDeleteRules(
        @Body @NotNull @Valid AddOrDeleteRulesRequest addOrDeleteRulesRequest, 
        @QueryValue(value="dry_run") @Nullable Boolean dryRun
    );

    /**
     * Creation of a Tweet
     * Causes the User to create a Tweet under the authorized account.
     *
     * @param tweetCreateRequest  (required)
     * @return TweetCreateResponse
     * 
     * @see <a href="https://developer.twitter.com/en/docs/twitter-api/tweets/manage-tweets/api-reference/post-tweets">Creation of a Tweet Documentation</a>
     */
    @Post(uri="/2/tweets")
    @Consumes({"application/json", "application/problem+json"})
    @Produces({"application/json"})
    Mono<TweetCreateResponse> createTweet(
        @Body @NotNull @Valid TweetCreateRequest tweetCreateRequest
    );

    /**
     * Tweet delete by Tweet ID
     * Delete specified Tweet (in the path) by ID.
     *
     * @param id The ID of the Tweet to be deleted. (required)
     * @return TweetDeleteResponse
     * 
     * @see <a href="https://developer.twitter.com/en/docs/twitter-api/tweets/manage-tweets/api-reference/delete-tweets-id">Tweet delete by Tweet ID Documentation</a>
     */
    @Delete(uri="/2/tweets/{id}")
    @Consumes({"application/json", "application/problem+json"})
    Mono<TweetDeleteResponse> deleteTweetById(
        @PathVariable(name="id") @NotNull @Pattern(regexp="^[0-9]{1,19}$") String id
    );

    /**
     * Tweet lookup by Tweet ID
     * Returns a variety of information about the Tweet specified by the requested ID.
     *
     * @param id A single Tweet ID. (required)
     * @param tweetFields A comma separated list of Tweet fields to display. (optional)
     * @param expansions A comma separated list of fields to expand. (optional)
     * @param mediaFields A comma separated list of Media fields to display. (optional)
     * @param pollFields A comma separated list of Poll fields to display. (optional)
     * @param userFields A comma separated list of User fields to display. (optional)
     * @param placeFields A comma separated list of Place fields to display. (optional)
     * @return Get2TweetsIdResponse
     * 
     * @see <a href="https://developer.twitter.com/en/docs/twitter-api/tweets/lookup/api-reference/get-tweets-id">Tweet lookup by Tweet ID Documentation</a>
     */
    @Get(uri="/2/tweets/{id}")
    @Consumes({"application/json", "application/problem+json"})
    Mono<Get2TweetsIdResponse> findTweetById(
        @PathVariable(name="id") @NotNull @Pattern(regexp="^[0-9]{1,19}$") String id, 
        @QueryValue(value="tweet.fields") @Nullable @Size(min=1) Set<String> tweetFields, 
        @QueryValue(value="expansions") @Nullable @Size(min=1) Set<String> expansions, 
        @QueryValue(value="media.fields") @Nullable @Size(min=1) Set<String> mediaFields, 
        @QueryValue(value="poll.fields") @Nullable @Size(min=1) Set<String> pollFields, 
        @QueryValue(value="user.fields") @Nullable @Size(min=1) Set<String> userFields, 
        @QueryValue(value="place.fields") @Nullable @Size(min=1) Set<String> placeFields
    );

    /**
     * Tweet lookup by Tweet IDs
     * Returns a variety of information about the Tweet specified by the requested ID.
     *
     * @param ids A comma separated list of Tweet IDs. Up to 100 are allowed in a single request. (required)
     * @param tweetFields A comma separated list of Tweet fields to display. (optional)
     * @param expansions A comma separated list of fields to expand. (optional)
     * @param mediaFields A comma separated list of Media fields to display. (optional)
     * @param pollFields A comma separated list of Poll fields to display. (optional)
     * @param userFields A comma separated list of User fields to display. (optional)
     * @param placeFields A comma separated list of Place fields to display. (optional)
     * @return Get2TweetsResponse
     * 
     * @see <a href="https://developer.twitter.com/en/docs/twitter-api/tweets/lookup/api-reference/get-tweets">Tweet lookup by Tweet IDs Documentation</a>
     */
    @Get(uri="/2/tweets")
    @Consumes({"application/json", "application/problem+json"})
    Mono<Get2TweetsResponse> findTweetsById(
        @QueryValue(value="ids") @NotNull @Size(min=1, max=100) List<String> ids, 
        @QueryValue(value="tweet.fields") @Nullable @Size(min=1) Set<String> tweetFields, 
        @QueryValue(value="expansions") @Nullable @Size(min=1) Set<String> expansions, 
        @QueryValue(value="media.fields") @Nullable @Size(min=1) Set<String> mediaFields, 
        @QueryValue(value="poll.fields") @Nullable @Size(min=1) Set<String> pollFields, 
        @QueryValue(value="user.fields") @Nullable @Size(min=1) Set<String> userFields, 
        @QueryValue(value="place.fields") @Nullable @Size(min=1) Set<String> placeFields
    );

    /**
     * Retrieve Tweets that quote a Tweet.
     * Returns a variety of information about each Tweet that quotes the Tweet specified by the requested ID.
     *
     * @param id A single Tweet ID. (required)
     * @param maxResults The maximum number of results to be returned. (optional, default to 10)
     * @param paginationToken This parameter is used to get a specified &#39;page&#39; of results. (optional)
     * @param exclude The set of entities to exclude (e.g. &#39;replies&#39; or &#39;retweets&#39;). (optional)
     * @param tweetFields A comma separated list of Tweet fields to display. (optional)
     * @param expansions A comma separated list of fields to expand. (optional)
     * @param mediaFields A comma separated list of Media fields to display. (optional)
     * @param pollFields A comma separated list of Poll fields to display. (optional)
     * @param userFields A comma separated list of User fields to display. (optional)
     * @param placeFields A comma separated list of Place fields to display. (optional)
     * @return Get2TweetsIdQuoteTweetsResponse
     * 
     * @see <a href="https://developer.twitter.com/en/docs/twitter-api/tweets/quote-tweets/api-reference/get-tweets-id-quote_tweets">Retrieve Tweets that quote a Tweet. Documentation</a>
     */
    @Get(uri="/2/tweets/{id}/quote_tweets")
    @Consumes({"application/json", "application/problem+json"})
    Mono<Get2TweetsIdQuoteTweetsResponse> findTweetsThatQuoteATweet(
        @PathVariable(name="id") @NotNull @Pattern(regexp="^[0-9]{1,19}$") String id, 
        @QueryValue(value="max_results", defaultValue="10") @Nullable @Min(10) @Max(100) Integer maxResults, 
        @QueryValue(value="pagination_token") @Nullable @Size(min=1) String paginationToken, 
        @QueryValue(value="exclude") @Nullable @Size(min=1) Set<String> exclude, 
        @QueryValue(value="tweet.fields") @Nullable @Size(min=1) Set<String> tweetFields, 
        @QueryValue(value="expansions") @Nullable @Size(min=1) Set<String> expansions, 
        @QueryValue(value="media.fields") @Nullable @Size(min=1) Set<String> mediaFields, 
        @QueryValue(value="poll.fields") @Nullable @Size(min=1) Set<String> pollFields, 
        @QueryValue(value="user.fields") @Nullable @Size(min=1) Set<String> userFields, 
        @QueryValue(value="place.fields") @Nullable @Size(min=1) Set<String> placeFields
    );

    /**
     * Rules lookup
     * Returns rules from a User&#39;s active rule set. Users can fetch all of their rules or a subset, specified by the provided rule ids.
     *
     * @param ids A comma-separated list of Rule IDs. (optional)
     * @param maxResults The maximum number of results. (optional, default to 1000)
     * @param paginationToken This value is populated by passing the &#39;next_token&#39; returned in a request to paginate through results. (optional)
     * @return RulesLookupResponse
     * 
     * @see <a href="https://developer.twitter.com/en/docs/twitter-api/tweets/filtered-stream/api-reference/get-tweets-search-stream-rules">Rules lookup Documentation</a>
     */
    @Get(uri="/2/tweets/search/stream/rules")
    @Consumes({"application/json", "application/problem+json"})
    Mono<RulesLookupResponse> getRules(
        @QueryValue(value="ids") @Nullable List<String> ids, 
        @QueryValue(value="max_results", defaultValue="1000") @Nullable @Min(1) @Max(1000) Integer maxResults, 
        @QueryValue(value="pagination_token") @Nullable @Size(min=16, max=16) String paginationToken
    );

    /**
     * Firehose stream
     * Streams 100% of public Tweets.
     *
     * @param partition The partition number. (required)
     * @param backfillMinutes The number of minutes of backfill requested. (optional)
     * @param startTime YYYY-MM-DDTHH:mm:ssZ. The earliest UTC timestamp to which the Tweets will be provided. (optional)
     * @param endTime YYYY-MM-DDTHH:mm:ssZ. The latest UTC timestamp to which the Tweets will be provided. (optional)
     * @param tweetFields A comma separated list of Tweet fields to display. (optional)
     * @param expansions A comma separated list of fields to expand. (optional)
     * @param mediaFields A comma separated list of Media fields to display. (optional)
     * @param pollFields A comma separated list of Poll fields to display. (optional)
     * @param userFields A comma separated list of User fields to display. (optional)
     * @param placeFields A comma separated list of Place fields to display. (optional)
     * @return StreamingTweetResponse
     */
    @Get(uri="/2/tweets/firehose/stream")
    @Consumes({"application/json", "application/problem+json"})
    Mono<StreamingTweetResponse> getTweetsFirehoseStream(
        @QueryValue(value="partition") @NotNull @Min(1) @Max(20) Integer partition, 
        @QueryValue(value="backfill_minutes") @Nullable @Min(0) @Max(5) Integer backfillMinutes, 
        @QueryValue(value="start_time") @Nullable @Format("yyyy-MM-dd'T'HH:mm:ss.SSSXXXX") OffsetDateTime startTime, 
        @QueryValue(value="end_time") @Nullable @Format("yyyy-MM-dd'T'HH:mm:ss.SSSXXXX") OffsetDateTime endTime, 
        @QueryValue(value="tweet.fields") @Nullable @Size(min=1) Set<String> tweetFields, 
        @QueryValue(value="expansions") @Nullable @Size(min=1) Set<String> expansions, 
        @QueryValue(value="media.fields") @Nullable @Size(min=1) Set<String> mediaFields, 
        @QueryValue(value="poll.fields") @Nullable @Size(min=1) Set<String> pollFields, 
        @QueryValue(value="user.fields") @Nullable @Size(min=1) Set<String> userFields, 
        @QueryValue(value="place.fields") @Nullable @Size(min=1) Set<String> placeFields
    );

    /**
     * Sample 10% stream
     * Streams a deterministic 10% of public Tweets.
     *
     * @param partition The partition number. (required)
     * @param backfillMinutes The number of minutes of backfill requested. (optional)
     * @param startTime YYYY-MM-DDTHH:mm:ssZ. The earliest UTC timestamp to which the Tweets will be provided. (optional)
     * @param endTime YYYY-MM-DDTHH:mm:ssZ. The latest UTC timestamp to which the Tweets will be provided. (optional)
     * @param tweetFields A comma separated list of Tweet fields to display. (optional)
     * @param expansions A comma separated list of fields to expand. (optional)
     * @param mediaFields A comma separated list of Media fields to display. (optional)
     * @param pollFields A comma separated list of Poll fields to display. (optional)
     * @param userFields A comma separated list of User fields to display. (optional)
     * @param placeFields A comma separated list of Place fields to display. (optional)
     * @return Get2TweetsSample10StreamResponse
     */
    @Get(uri="/2/tweets/sample10/stream")
    @Consumes({"application/json", "application/problem+json"})
    Mono<Get2TweetsSample10StreamResponse> getTweetsSample10Stream(
        @QueryValue(value="partition") @NotNull @Min(1) @Max(2) Integer partition, 
        @QueryValue(value="backfill_minutes") @Nullable @Min(0) @Max(5) Integer backfillMinutes, 
        @QueryValue(value="start_time") @Nullable @Format("yyyy-MM-dd'T'HH:mm:ss.SSSXXXX") OffsetDateTime startTime, 
        @QueryValue(value="end_time") @Nullable @Format("yyyy-MM-dd'T'HH:mm:ss.SSSXXXX") OffsetDateTime endTime, 
        @QueryValue(value="tweet.fields") @Nullable @Size(min=1) Set<String> tweetFields, 
        @QueryValue(value="expansions") @Nullable @Size(min=1) Set<String> expansions, 
        @QueryValue(value="media.fields") @Nullable @Size(min=1) Set<String> mediaFields, 
        @QueryValue(value="poll.fields") @Nullable @Size(min=1) Set<String> pollFields, 
        @QueryValue(value="user.fields") @Nullable @Size(min=1) Set<String> userFields, 
        @QueryValue(value="place.fields") @Nullable @Size(min=1) Set<String> placeFields
    );

    /**
     * Hide replies
     * Hides or unhides a reply to an owned conversation.
     *
     * @param tweetId The ID of the reply that you want to hide or unhide. (required)
     * @param tweetHideRequest  (optional)
     * @return TweetHideResponse
     * 
     * @see <a href="https://developer.twitter.com/en/docs/twitter-api/tweets/hide-replies/api-reference/put-tweets-id-hidden">Hide replies Documentation</a>
     */
    @Put(uri="/2/tweets/{tweet_id}/hidden")
    @Consumes({"application/json", "application/problem+json"})
    @Produces({"application/json"})
    Mono<TweetHideResponse> hideReplyById(
        @PathVariable(name="tweet_id") @NotNull @Pattern(regexp="^[0-9]{1,19}$") String tweetId, 
        @Body @Nullable @Valid TweetHideRequest tweetHideRequest
    );

    /**
     * List Tweets timeline by List ID.
     * Returns a list of Tweets associated with the provided List ID.
     *
     * @param id The ID of the List. (required)
     * @param maxResults The maximum number of results. (optional, default to 100)
     * @param paginationToken This parameter is used to get the next &#39;page&#39; of results. (optional)
     * @param tweetFields A comma separated list of Tweet fields to display. (optional)
     * @param expansions A comma separated list of fields to expand. (optional)
     * @param mediaFields A comma separated list of Media fields to display. (optional)
     * @param pollFields A comma separated list of Poll fields to display. (optional)
     * @param userFields A comma separated list of User fields to display. (optional)
     * @param placeFields A comma separated list of Place fields to display. (optional)
     * @return Get2ListsIdTweetsResponse
     * 
     * @see <a href="https://developer.twitter.com/en/docs/twitter-api/lists/list-tweets/api-reference/get-lists-id-tweets">List Tweets timeline by List ID. Documentation</a>
     */
    @Get(uri="/2/lists/{id}/tweets")
    @Consumes({"application/json", "application/problem+json"})
    Mono<Get2ListsIdTweetsResponse> listsIdTweets(
        @PathVariable(name="id") @NotNull @Pattern(regexp="^[0-9]{1,19}$") String id, 
        @QueryValue(value="max_results", defaultValue="100") @Nullable @Min(1) @Max(100) Integer maxResults, 
        @QueryValue(value="pagination_token") @Nullable @Size(min=1) String paginationToken, 
        @QueryValue(value="tweet.fields") @Nullable @Size(min=1) Set<String> tweetFields, 
        @QueryValue(value="expansions") @Nullable @Size(min=1) Set<String> expansions, 
        @QueryValue(value="media.fields") @Nullable @Size(min=1) Set<String> mediaFields, 
        @QueryValue(value="poll.fields") @Nullable @Size(min=1) Set<String> pollFields, 
        @QueryValue(value="user.fields") @Nullable @Size(min=1) Set<String> userFields, 
        @QueryValue(value="place.fields") @Nullable @Size(min=1) Set<String> placeFields
    );

    /**
     * Sample stream
     * Streams a deterministic 1% of public Tweets.
     *
     * @param backfillMinutes The number of minutes of backfill requested. (optional)
     * @param tweetFields A comma separated list of Tweet fields to display. (optional)
     * @param expansions A comma separated list of fields to expand. (optional)
     * @param mediaFields A comma separated list of Media fields to display. (optional)
     * @param pollFields A comma separated list of Poll fields to display. (optional)
     * @param userFields A comma separated list of User fields to display. (optional)
     * @param placeFields A comma separated list of Place fields to display. (optional)
     * @return StreamingTweetResponse
     * 
     * @see <a href="https://developer.twitter.com/en/docs/twitter-api/tweets/volume-streams/api-reference/get-tweets-sample-stream">Sample stream Documentation</a>
     */
    @Get(uri="/2/tweets/sample/stream")
    @Consumes({"application/json", "application/problem+json"})
    Mono<StreamingTweetResponse> sampleStream(
        @QueryValue(value="backfill_minutes") @Nullable @Min(0) @Max(5) Integer backfillMinutes, 
        @QueryValue(value="tweet.fields") @Nullable @Size(min=1) Set<String> tweetFields, 
        @QueryValue(value="expansions") @Nullable @Size(min=1) Set<String> expansions, 
        @QueryValue(value="media.fields") @Nullable @Size(min=1) Set<String> mediaFields, 
        @QueryValue(value="poll.fields") @Nullable @Size(min=1) Set<String> pollFields, 
        @QueryValue(value="user.fields") @Nullable @Size(min=1) Set<String> userFields, 
        @QueryValue(value="place.fields") @Nullable @Size(min=1) Set<String> placeFields
    );

    /**
     * Filtered stream
     * Streams Tweets matching the stream&#39;s active rule set.
     *
     * @param backfillMinutes The number of minutes of backfill requested. (optional)
     * @param startTime YYYY-MM-DDTHH:mm:ssZ. The earliest UTC timestamp from which the Tweets will be provided. (optional)
     * @param endTime YYYY-MM-DDTHH:mm:ssZ. The latest UTC timestamp to which the Tweets will be provided. (optional)
     * @param tweetFields A comma separated list of Tweet fields to display. (optional)
     * @param expansions A comma separated list of fields to expand. (optional)
     * @param mediaFields A comma separated list of Media fields to display. (optional)
     * @param pollFields A comma separated list of Poll fields to display. (optional)
     * @param userFields A comma separated list of User fields to display. (optional)
     * @param placeFields A comma separated list of Place fields to display. (optional)
     * @return FilteredStreamingTweetResponse
     * 
     * @see <a href="https://developer.twitter.com/en/docs/twitter-api/tweets/filtered-stream/api-reference/get-tweets-search-stream">Filtered stream Documentation</a>
     */
    @Get(uri="/2/tweets/search/stream")
    @Consumes({"application/json", "application/problem+json"})
    Mono<FilteredStreamingTweetResponse> searchStream(
        @QueryValue(value="backfill_minutes") @Nullable @Min(0) @Max(5) Integer backfillMinutes, 
        @QueryValue(value="start_time") @Nullable @Format("yyyy-MM-dd'T'HH:mm:ss.SSSXXXX") OffsetDateTime startTime, 
        @QueryValue(value="end_time") @Nullable @Format("yyyy-MM-dd'T'HH:mm:ss.SSSXXXX") OffsetDateTime endTime, 
        @QueryValue(value="tweet.fields") @Nullable @Size(min=1) Set<String> tweetFields, 
        @QueryValue(value="expansions") @Nullable @Size(min=1) Set<String> expansions, 
        @QueryValue(value="media.fields") @Nullable @Size(min=1) Set<String> mediaFields, 
        @QueryValue(value="poll.fields") @Nullable @Size(min=1) Set<String> pollFields, 
        @QueryValue(value="user.fields") @Nullable @Size(min=1) Set<String> userFields, 
        @QueryValue(value="place.fields") @Nullable @Size(min=1) Set<String> placeFields
    );

    /**
     * Retrieve the list of Users who purchased a ticket to the given space
     * Retrieves the list of Users who purchased a ticket to the given space
     *
     * @param id The ID of the Space to be retrieved. (required)
     * @param paginationToken This parameter is used to get a specified &#39;page&#39; of results. (optional)
     * @param maxResults The maximum number of results. (optional, default to 100)
     * @param userFields A comma separated list of User fields to display. (optional)
     * @param expansions A comma separated list of fields to expand. (optional)
     * @param tweetFields A comma separated list of Tweet fields to display. (optional)
     * @return Get2SpacesIdBuyersResponse
     * 
     * @see <a href="https://developer.twitter.com/en/docs/twitter-api/spaces/lookup/api-reference/get-spaces-id-buyers">Retrieve the list of Users who purchased a ticket to the given space Documentation</a>
     */
    @Get(uri="/2/spaces/{id}/buyers")
    @Consumes({"application/json", "application/problem+json"})
    Mono<Get2SpacesIdBuyersResponse> spaceBuyers(
        @PathVariable(name="id") @NotNull @Pattern(regexp="^[a-zA-Z0-9]{1,13}$") String id, 
        @QueryValue(value="pagination_token") @Nullable @Size(min=16) String paginationToken, 
        @QueryValue(value="max_results", defaultValue="100") @Nullable @Min(1) @Max(100) Integer maxResults, 
        @QueryValue(value="user.fields") @Nullable @Size(min=1) Set<String> userFields, 
        @QueryValue(value="expansions") @Nullable @Size(min=1) Set<String> expansions, 
        @QueryValue(value="tweet.fields") @Nullable @Size(min=1) Set<String> tweetFields
    );

    /**
     * Retrieve Tweets from a Space.
     * Retrieves Tweets shared in the specified Space.
     *
     * @param id The ID of the Space to be retrieved. (required)
     * @param maxResults The number of Tweets to fetch from the provided space. If not provided, the value will default to the maximum of 100. (optional, default to 100)
     * @param tweetFields A comma separated list of Tweet fields to display. (optional)
     * @param expansions A comma separated list of fields to expand. (optional)
     * @param mediaFields A comma separated list of Media fields to display. (optional)
     * @param pollFields A comma separated list of Poll fields to display. (optional)
     * @param userFields A comma separated list of User fields to display. (optional)
     * @param placeFields A comma separated list of Place fields to display. (optional)
     * @return Get2SpacesIdTweetsResponse
     * 
     * @see <a href="https://developer.twitter.com/en/docs/twitter-api/spaces/lookup/api-reference/get-spaces-id-tweets">Retrieve Tweets from a Space. Documentation</a>
     */
    @Get(uri="/2/spaces/{id}/tweets")
    @Consumes({"application/json", "application/problem+json"})
    Mono<Get2SpacesIdTweetsResponse> spaceTweets(
        @PathVariable(name="id") @NotNull @Pattern(regexp="^[a-zA-Z0-9]{1,13}$") String id, 
        @QueryValue(value="max_results", defaultValue="100") @Nullable @Min(1) @Max(100) Integer maxResults, 
        @QueryValue(value="tweet.fields") @Nullable @Size(min=1) Set<String> tweetFields, 
        @QueryValue(value="expansions") @Nullable @Size(min=1) Set<String> expansions, 
        @QueryValue(value="media.fields") @Nullable @Size(min=1) Set<String> mediaFields, 
        @QueryValue(value="poll.fields") @Nullable @Size(min=1) Set<String> pollFields, 
        @QueryValue(value="user.fields") @Nullable @Size(min=1) Set<String> userFields, 
        @QueryValue(value="place.fields") @Nullable @Size(min=1) Set<String> placeFields
    );

    /**
     * Full archive search counts
     * Returns Tweet Counts that match a search query.
     *
     * @param query One query/rule/filter for matching Tweets. Refer to https://t.co/rulelength to identify the max query length. (required)
     * @param startTime YYYY-MM-DDTHH:mm:ssZ. The oldest UTC timestamp (from most recent 7 days) from which the Tweets will be provided. Timestamp is in second granularity and is inclusive (i.e. 12:00:01 includes the first second of the minute). (optional)
     * @param endTime YYYY-MM-DDTHH:mm:ssZ. The newest, most recent UTC timestamp to which the Tweets will be provided. Timestamp is in second granularity and is exclusive (i.e. 12:00:01 excludes the first second of the minute). (optional)
     * @param sinceId Returns results with a Tweet ID greater than (that is, more recent than) the specified ID. (optional)
     * @param untilId Returns results with a Tweet ID less than (that is, older than) the specified ID. (optional)
     * @param nextToken This parameter is used to get the next &#39;page&#39; of results. The value used with the parameter is pulled directly from the response provided by the API, and should not be modified. (optional)
     * @param paginationToken This parameter is used to get the next &#39;page&#39; of results. The value used with the parameter is pulled directly from the response provided by the API, and should not be modified. (optional)
     * @param granularity The granularity for the search counts results. (optional, default to hour)
     * @param searchCountFields A comma separated list of SearchCount fields to display. (optional)
     * @return Get2TweetsCountsAllResponse
     * 
     * @see <a href="https://developer.twitter.com/en/docs/twitter-api/tweets/search/api-reference/get-tweets-search-all">Full archive search counts Documentation</a>
     */
    @Get(uri="/2/tweets/counts/all")
    @Consumes({"application/json", "application/problem+json"})
    Mono<Get2TweetsCountsAllResponse> tweetCountsFullArchiveSearch(
        @QueryValue(value="query") @NotNull @Size(min=1, max=4096) String query, 
        @QueryValue(value="start_time") @Nullable @Format("yyyy-MM-dd'T'HH:mm:ss.SSSXXXX") OffsetDateTime startTime, 
        @QueryValue(value="end_time") @Nullable @Format("yyyy-MM-dd'T'HH:mm:ss.SSSXXXX") OffsetDateTime endTime, 
        @QueryValue(value="since_id") @Nullable @Pattern(regexp="^[0-9]{1,19}$") String sinceId, 
        @QueryValue(value="until_id") @Nullable @Pattern(regexp="^[0-9]{1,19}$") String untilId, 
        @QueryValue(value="next_token") @Nullable @Size(min=1) String nextToken, 
        @QueryValue(value="pagination_token") @Nullable @Size(min=1) String paginationToken, 
        @QueryValue(value="granularity", defaultValue="hour") @Nullable String granularity, 
        @QueryValue(value="search_count.fields") @Nullable @Size(min=1) Set<String> searchCountFields
    );

    /**
     * Recent search counts
     * Returns Tweet Counts from the last 7 days that match a search query.
     *
     * @param query One query/rule/filter for matching Tweets. Refer to https://t.co/rulelength to identify the max query length. (required)
     * @param startTime YYYY-MM-DDTHH:mm:ssZ. The oldest UTC timestamp (from most recent 7 days) from which the Tweets will be provided. Timestamp is in second granularity and is inclusive (i.e. 12:00:01 includes the first second of the minute). (optional)
     * @param endTime YYYY-MM-DDTHH:mm:ssZ. The newest, most recent UTC timestamp to which the Tweets will be provided. Timestamp is in second granularity and is exclusive (i.e. 12:00:01 excludes the first second of the minute). (optional)
     * @param sinceId Returns results with a Tweet ID greater than (that is, more recent than) the specified ID. (optional)
     * @param untilId Returns results with a Tweet ID less than (that is, older than) the specified ID. (optional)
     * @param nextToken This parameter is used to get the next &#39;page&#39; of results. The value used with the parameter is pulled directly from the response provided by the API, and should not be modified. (optional)
     * @param paginationToken This parameter is used to get the next &#39;page&#39; of results. The value used with the parameter is pulled directly from the response provided by the API, and should not be modified. (optional)
     * @param granularity The granularity for the search counts results. (optional, default to hour)
     * @param searchCountFields A comma separated list of SearchCount fields to display. (optional)
     * @return Get2TweetsCountsRecentResponse
     * 
     * @see <a href="https://developer.twitter.com/en/docs/twitter-api/tweets/counts/api-reference/get-tweets-counts-recent">Recent search counts Documentation</a>
     */
    @Get(uri="/2/tweets/counts/recent")
    @Consumes({"application/json", "application/problem+json"})
    Mono<Get2TweetsCountsRecentResponse> tweetCountsRecentSearch(
        @QueryValue(value="query") @NotNull @Size(min=1, max=4096) String query, 
        @QueryValue(value="start_time") @Nullable @Format("yyyy-MM-dd'T'HH:mm:ss.SSSXXXX") OffsetDateTime startTime, 
        @QueryValue(value="end_time") @Nullable @Format("yyyy-MM-dd'T'HH:mm:ss.SSSXXXX") OffsetDateTime endTime, 
        @QueryValue(value="since_id") @Nullable @Pattern(regexp="^[0-9]{1,19}$") String sinceId, 
        @QueryValue(value="until_id") @Nullable @Pattern(regexp="^[0-9]{1,19}$") String untilId, 
        @QueryValue(value="next_token") @Nullable @Size(min=1) String nextToken, 
        @QueryValue(value="pagination_token") @Nullable @Size(min=1) String paginationToken, 
        @QueryValue(value="granularity", defaultValue="hour") @Nullable String granularity, 
        @QueryValue(value="search_count.fields") @Nullable @Size(min=1) Set<String> searchCountFields
    );

    /**
     * Full-archive search
     * Returns Tweets that match a search query.
     *
     * @param query One query/rule/filter for matching Tweets. Refer to https://t.co/rulelength to identify the max query length. (required)
     * @param startTime YYYY-MM-DDTHH:mm:ssZ. The oldest UTC timestamp from which the Tweets will be provided. Timestamp is in second granularity and is inclusive (i.e. 12:00:01 includes the first second of the minute). (optional)
     * @param endTime YYYY-MM-DDTHH:mm:ssZ. The newest, most recent UTC timestamp to which the Tweets will be provided. Timestamp is in second granularity and is exclusive (i.e. 12:00:01 excludes the first second of the minute). (optional)
     * @param sinceId Returns results with a Tweet ID greater than (that is, more recent than) the specified ID. (optional)
     * @param untilId Returns results with a Tweet ID less than (that is, older than) the specified ID. (optional)
     * @param maxResults The maximum number of search results to be returned by a request. (optional, default to 10)
     * @param nextToken This parameter is used to get the next &#39;page&#39; of results. The value used with the parameter is pulled directly from the response provided by the API, and should not be modified. (optional)
     * @param paginationToken This parameter is used to get the next &#39;page&#39; of results. The value used with the parameter is pulled directly from the response provided by the API, and should not be modified. (optional)
     * @param sortOrder This order in which to return results. (optional)
     * @param tweetFields A comma separated list of Tweet fields to display. (optional)
     * @param expansions A comma separated list of fields to expand. (optional)
     * @param mediaFields A comma separated list of Media fields to display. (optional)
     * @param pollFields A comma separated list of Poll fields to display. (optional)
     * @param userFields A comma separated list of User fields to display. (optional)
     * @param placeFields A comma separated list of Place fields to display. (optional)
     * @return Get2TweetsSearchAllResponse
     * 
     * @see <a href="https://developer.twitter.com/en/docs/twitter-api/tweets/search/api-reference/get-tweets-search-all">Full-archive search Documentation</a>
     */
    @Get(uri="/2/tweets/search/all")
    @Consumes({"application/json", "application/problem+json"})
    Mono<Get2TweetsSearchAllResponse> tweetsFullarchiveSearch(
        @QueryValue(value="query") @NotNull @Size(min=1, max=4096) String query, 
        @QueryValue(value="start_time") @Nullable @Format("yyyy-MM-dd'T'HH:mm:ss.SSSXXXX") OffsetDateTime startTime, 
        @QueryValue(value="end_time") @Nullable @Format("yyyy-MM-dd'T'HH:mm:ss.SSSXXXX") OffsetDateTime endTime, 
        @QueryValue(value="since_id") @Nullable @Pattern(regexp="^[0-9]{1,19}$") String sinceId, 
        @QueryValue(value="until_id") @Nullable @Pattern(regexp="^[0-9]{1,19}$") String untilId, 
        @QueryValue(value="max_results", defaultValue="10") @Nullable @Min(10) @Max(500) Integer maxResults, 
        @QueryValue(value="next_token") @Nullable @Size(min=1) String nextToken, 
        @QueryValue(value="pagination_token") @Nullable @Size(min=1) String paginationToken, 
        @QueryValue(value="sort_order") @Nullable String sortOrder, 
        @QueryValue(value="tweet.fields") @Nullable @Size(min=1) Set<String> tweetFields, 
        @QueryValue(value="expansions") @Nullable @Size(min=1) Set<String> expansions, 
        @QueryValue(value="media.fields") @Nullable @Size(min=1) Set<String> mediaFields, 
        @QueryValue(value="poll.fields") @Nullable @Size(min=1) Set<String> pollFields, 
        @QueryValue(value="user.fields") @Nullable @Size(min=1) Set<String> userFields, 
        @QueryValue(value="place.fields") @Nullable @Size(min=1) Set<String> placeFields
    );

    /**
     * Recent search
     * Returns Tweets from the last 7 days that match a search query.
     *
     * @param query One query/rule/filter for matching Tweets. Refer to https://t.co/rulelength to identify the max query length. (required)
     * @param startTime YYYY-MM-DDTHH:mm:ssZ. The oldest UTC timestamp from which the Tweets will be provided. Timestamp is in second granularity and is inclusive (i.e. 12:00:01 includes the first second of the minute). (optional)
     * @param endTime YYYY-MM-DDTHH:mm:ssZ. The newest, most recent UTC timestamp to which the Tweets will be provided. Timestamp is in second granularity and is exclusive (i.e. 12:00:01 excludes the first second of the minute). (optional)
     * @param sinceId Returns results with a Tweet ID greater than (that is, more recent than) the specified ID. (optional)
     * @param untilId Returns results with a Tweet ID less than (that is, older than) the specified ID. (optional)
     * @param maxResults The maximum number of search results to be returned by a request. (optional, default to 10)
     * @param nextToken This parameter is used to get the next &#39;page&#39; of results. The value used with the parameter is pulled directly from the response provided by the API, and should not be modified. (optional)
     * @param paginationToken This parameter is used to get the next &#39;page&#39; of results. The value used with the parameter is pulled directly from the response provided by the API, and should not be modified. (optional)
     * @param sortOrder This order in which to return results. (optional)
     * @param tweetFields A comma separated list of Tweet fields to display. (optional)
     * @param expansions A comma separated list of fields to expand. (optional)
     * @param mediaFields A comma separated list of Media fields to display. (optional)
     * @param pollFields A comma separated list of Poll fields to display. (optional)
     * @param userFields A comma separated list of User fields to display. (optional)
     * @param placeFields A comma separated list of Place fields to display. (optional)
     * @return Get2TweetsSearchRecentResponse
     * 
     * @see <a href="https://developer.twitter.com/en/docs/twitter-api/tweets/search/api-reference/get-tweets-search-recent">Recent search Documentation</a>
     */
    @Get(uri="/2/tweets/search/recent")
    @Consumes({"application/json", "application/problem+json"})
    Mono<Get2TweetsSearchRecentResponse> tweetsRecentSearch(
        @QueryValue(value="query") @NotNull @Size(min=1, max=4096) String query, 
        @QueryValue(value="start_time") @Nullable @Format("yyyy-MM-dd'T'HH:mm:ss.SSSXXXX") OffsetDateTime startTime, 
        @QueryValue(value="end_time") @Nullable @Format("yyyy-MM-dd'T'HH:mm:ss.SSSXXXX") OffsetDateTime endTime, 
        @QueryValue(value="since_id") @Nullable @Pattern(regexp="^[0-9]{1,19}$") String sinceId, 
        @QueryValue(value="until_id") @Nullable @Pattern(regexp="^[0-9]{1,19}$") String untilId, 
        @QueryValue(value="max_results", defaultValue="10") @Nullable @Min(10) @Max(100) Integer maxResults, 
        @QueryValue(value="next_token") @Nullable @Size(min=1) String nextToken, 
        @QueryValue(value="pagination_token") @Nullable @Size(min=1) String paginationToken, 
        @QueryValue(value="sort_order") @Nullable String sortOrder, 
        @QueryValue(value="tweet.fields") @Nullable @Size(min=1) Set<String> tweetFields, 
        @QueryValue(value="expansions") @Nullable @Size(min=1) Set<String> expansions, 
        @QueryValue(value="media.fields") @Nullable @Size(min=1) Set<String> mediaFields, 
        @QueryValue(value="poll.fields") @Nullable @Size(min=1) Set<String> pollFields, 
        @QueryValue(value="user.fields") @Nullable @Size(min=1) Set<String> userFields, 
        @QueryValue(value="place.fields") @Nullable @Size(min=1) Set<String> placeFields
    );

    /**
     * Causes the User (in the path) to like the specified Tweet
     * Causes the User (in the path) to like the specified Tweet. The User in the path must match the User context authorizing the request.
     *
     * @param id The ID of the authenticated source User that is requesting to like the Tweet. (required)
     * @param usersLikesCreateRequest  (optional)
     * @return UsersLikesCreateResponse
     * 
     * @see <a href="https://developer.twitter.com/en/docs/twitter-api/tweets/likes/api-reference/post-users-id-likes">Causes the User (in the path) to like the specified Tweet Documentation</a>
     */
    @Post(uri="/2/users/{id}/likes")
    @Consumes({"application/json", "application/problem+json"})
    @Produces({"application/json"})
    Mono<UsersLikesCreateResponse> usersIdLike(
        @PathVariable(name="id") @NotNull String id, 
        @Body @Nullable @Valid UsersLikesCreateRequest usersLikesCreateRequest
    );

    /**
     * Returns Tweet objects liked by the provided User ID
     * Returns a list of Tweets liked by the provided User ID
     *
     * @param id The ID of the User to lookup. (required)
     * @param maxResults The maximum number of results. (optional)
     * @param paginationToken This parameter is used to get the next &#39;page&#39; of results. (optional)
     * @param tweetFields A comma separated list of Tweet fields to display. (optional)
     * @param expansions A comma separated list of fields to expand. (optional)
     * @param mediaFields A comma separated list of Media fields to display. (optional)
     * @param pollFields A comma separated list of Poll fields to display. (optional)
     * @param userFields A comma separated list of User fields to display. (optional)
     * @param placeFields A comma separated list of Place fields to display. (optional)
     * @return Get2UsersIdLikedTweetsResponse
     * 
     * @see <a href="https://developer.twitter.com/en/docs/twitter-api/tweets/likes/api-reference/get-users-id-liked_tweets">Returns Tweet objects liked by the provided User ID Documentation</a>
     */
    @Get(uri="/2/users/{id}/liked_tweets")
    @Consumes({"application/json", "application/problem+json"})
    Mono<Get2UsersIdLikedTweetsResponse> usersIdLikedTweets(
        @PathVariable(name="id") @NotNull @Pattern(regexp="^[0-9]{1,19}$") String id, 
        @QueryValue(value="max_results") @Nullable @Min(5) @Max(100) Integer maxResults, 
        @QueryValue(value="pagination_token") @Nullable @Size(min=1) String paginationToken, 
        @QueryValue(value="tweet.fields") @Nullable @Size(min=1) Set<String> tweetFields, 
        @QueryValue(value="expansions") @Nullable @Size(min=1) Set<String> expansions, 
        @QueryValue(value="media.fields") @Nullable @Size(min=1) Set<String> mediaFields, 
        @QueryValue(value="poll.fields") @Nullable @Size(min=1) Set<String> pollFields, 
        @QueryValue(value="user.fields") @Nullable @Size(min=1) Set<String> userFields, 
        @QueryValue(value="place.fields") @Nullable @Size(min=1) Set<String> placeFields
    );

    /**
     * User mention timeline by User ID
     * Returns Tweet objects that mention username associated to the provided User ID
     *
     * @param id The ID of the User to lookup. (required)
     * @param sinceId The minimum Tweet ID to be included in the result set. This parameter takes precedence over start_time if both are specified. (optional)
     * @param untilId The maximum Tweet ID to be included in the result set. This parameter takes precedence over end_time if both are specified. (optional)
     * @param maxResults The maximum number of results. (optional)
     * @param paginationToken This parameter is used to get the next &#39;page&#39; of results. (optional)
     * @param startTime YYYY-MM-DDTHH:mm:ssZ. The earliest UTC timestamp from which the Tweets will be provided. The since_id parameter takes precedence if it is also specified. (optional)
     * @param endTime YYYY-MM-DDTHH:mm:ssZ. The latest UTC timestamp to which the Tweets will be provided. The until_id parameter takes precedence if it is also specified. (optional)
     * @param tweetFields A comma separated list of Tweet fields to display. (optional)
     * @param expansions A comma separated list of fields to expand. (optional)
     * @param mediaFields A comma separated list of Media fields to display. (optional)
     * @param pollFields A comma separated list of Poll fields to display. (optional)
     * @param userFields A comma separated list of User fields to display. (optional)
     * @param placeFields A comma separated list of Place fields to display. (optional)
     * @return Get2UsersIdMentionsResponse
     * 
     * @see <a href="https://developer.twitter.com/en/docs/twitter-api/tweets/timelines/api-reference/get-users-id-mentions">User mention timeline by User ID Documentation</a>
     */
    @Get(uri="/2/users/{id}/mentions")
    @Consumes({"application/json", "application/problem+json"})
    Mono<Get2UsersIdMentionsResponse> usersIdMentions(
        @PathVariable(name="id") @NotNull @Pattern(regexp="^[0-9]{1,19}$") String id, 
        @QueryValue(value="since_id") @Nullable @Pattern(regexp="^[0-9]{1,19}$") String sinceId, 
        @QueryValue(value="until_id") @Nullable @Pattern(regexp="^[0-9]{1,19}$") String untilId, 
        @QueryValue(value="max_results") @Nullable @Min(5) @Max(100) Integer maxResults, 
        @QueryValue(value="pagination_token") @Nullable @Size(min=1) String paginationToken, 
        @QueryValue(value="start_time") @Nullable @Format("yyyy-MM-dd'T'HH:mm:ss.SSSXXXX") OffsetDateTime startTime, 
        @QueryValue(value="end_time") @Nullable @Format("yyyy-MM-dd'T'HH:mm:ss.SSSXXXX") OffsetDateTime endTime, 
        @QueryValue(value="tweet.fields") @Nullable @Size(min=1) Set<String> tweetFields, 
        @QueryValue(value="expansions") @Nullable @Size(min=1) Set<String> expansions, 
        @QueryValue(value="media.fields") @Nullable @Size(min=1) Set<String> mediaFields, 
        @QueryValue(value="poll.fields") @Nullable @Size(min=1) Set<String> pollFields, 
        @QueryValue(value="user.fields") @Nullable @Size(min=1) Set<String> userFields, 
        @QueryValue(value="place.fields") @Nullable @Size(min=1) Set<String> placeFields
    );

    /**
     * Causes the User (in the path) to retweet the specified Tweet.
     * Causes the User (in the path) to retweet the specified Tweet. The User in the path must match the User context authorizing the request.
     *
     * @param id The ID of the authenticated source User that is requesting to retweet the Tweet. (required)
     * @param usersRetweetsCreateRequest  (optional)
     * @return UsersRetweetsCreateResponse
     * 
     * @see <a href="https://developer.twitter.com/en/docs/twitter-api/tweets/retweets/api-reference/post-users-id-retweets">Causes the User (in the path) to retweet the specified Tweet. Documentation</a>
     */
    @Post(uri="/2/users/{id}/retweets")
    @Consumes({"application/json", "application/problem+json"})
    @Produces({"application/json"})
    Mono<UsersRetweetsCreateResponse> usersIdRetweets(
        @PathVariable(name="id") @NotNull String id, 
        @Body @Nullable @Valid UsersRetweetsCreateRequest usersRetweetsCreateRequest
    );

    /**
     * User home timeline by User ID
     * Returns Tweet objects that appears in the provided User ID&#39;s home timeline
     *
     * @param id The ID of the authenticated source User to list Reverse Chronological Timeline Tweets of. (required)
     * @param sinceId The minimum Tweet ID to be included in the result set. This parameter takes precedence over start_time if both are specified. (optional)
     * @param untilId The maximum Tweet ID to be included in the result set. This parameter takes precedence over end_time if both are specified. (optional)
     * @param maxResults The maximum number of results. (optional)
     * @param paginationToken This parameter is used to get the next &#39;page&#39; of results. (optional)
     * @param exclude The set of entities to exclude (e.g. &#39;replies&#39; or &#39;retweets&#39;). (optional)
     * @param startTime YYYY-MM-DDTHH:mm:ssZ. The earliest UTC timestamp from which the Tweets will be provided. The since_id parameter takes precedence if it is also specified. (optional)
     * @param endTime YYYY-MM-DDTHH:mm:ssZ. The latest UTC timestamp to which the Tweets will be provided. The until_id parameter takes precedence if it is also specified. (optional)
     * @param tweetFields A comma separated list of Tweet fields to display. (optional)
     * @param expansions A comma separated list of fields to expand. (optional)
     * @param mediaFields A comma separated list of Media fields to display. (optional)
     * @param pollFields A comma separated list of Poll fields to display. (optional)
     * @param userFields A comma separated list of User fields to display. (optional)
     * @param placeFields A comma separated list of Place fields to display. (optional)
     * @return Get2UsersIdTimelinesReverseChronologicalResponse
     * 
     * @see <a href="https://developer.twitter.com/en/docs/twitter-api/tweets/timelines/api-reference/get-users-id-reverse-chronological">User home timeline by User ID Documentation</a>
     */
    @Get(uri="/2/users/{id}/timelines/reverse_chronological")
    @Consumes({"application/json", "application/problem+json"})
    Mono<Get2UsersIdTimelinesReverseChronologicalResponse> usersIdTimeline(
        @PathVariable(name="id") @NotNull String id, 
        @QueryValue(value="since_id") @Nullable @Pattern(regexp="^[0-9]{1,19}$") String sinceId, 
        @QueryValue(value="until_id") @Nullable @Pattern(regexp="^[0-9]{1,19}$") String untilId, 
        @QueryValue(value="max_results") @Nullable @Min(1) @Max(100) Integer maxResults, 
        @QueryValue(value="pagination_token") @Nullable @Size(min=1) String paginationToken, 
        @QueryValue(value="exclude") @Nullable Set<String> exclude, 
        @QueryValue(value="start_time") @Nullable @Format("yyyy-MM-dd'T'HH:mm:ss.SSSXXXX") OffsetDateTime startTime, 
        @QueryValue(value="end_time") @Nullable @Format("yyyy-MM-dd'T'HH:mm:ss.SSSXXXX") OffsetDateTime endTime, 
        @QueryValue(value="tweet.fields") @Nullable @Size(min=1) Set<String> tweetFields, 
        @QueryValue(value="expansions") @Nullable @Size(min=1) Set<String> expansions, 
        @QueryValue(value="media.fields") @Nullable @Size(min=1) Set<String> mediaFields, 
        @QueryValue(value="poll.fields") @Nullable @Size(min=1) Set<String> pollFields, 
        @QueryValue(value="user.fields") @Nullable @Size(min=1) Set<String> userFields, 
        @QueryValue(value="place.fields") @Nullable @Size(min=1) Set<String> placeFields
    );

    /**
     * User Tweets timeline by User ID
     * Returns a list of Tweets authored by the provided User ID
     *
     * @param id The ID of the User to lookup. (required)
     * @param sinceId The minimum Tweet ID to be included in the result set. This parameter takes precedence over start_time if both are specified. (optional)
     * @param untilId The maximum Tweet ID to be included in the result set. This parameter takes precedence over end_time if both are specified. (optional)
     * @param maxResults The maximum number of results. (optional)
     * @param paginationToken This parameter is used to get the next &#39;page&#39; of results. (optional)
     * @param exclude The set of entities to exclude (e.g. &#39;replies&#39; or &#39;retweets&#39;). (optional)
     * @param startTime YYYY-MM-DDTHH:mm:ssZ. The earliest UTC timestamp from which the Tweets will be provided. The since_id parameter takes precedence if it is also specified. (optional)
     * @param endTime YYYY-MM-DDTHH:mm:ssZ. The latest UTC timestamp to which the Tweets will be provided. The until_id parameter takes precedence if it is also specified. (optional)
     * @param tweetFields A comma separated list of Tweet fields to display. (optional)
     * @param expansions A comma separated list of fields to expand. (optional)
     * @param mediaFields A comma separated list of Media fields to display. (optional)
     * @param pollFields A comma separated list of Poll fields to display. (optional)
     * @param userFields A comma separated list of User fields to display. (optional)
     * @param placeFields A comma separated list of Place fields to display. (optional)
     * @return Get2UsersIdTweetsResponse
     * 
     * @see <a href="https://developer.twitter.com/en/docs/twitter-api/tweets/timelines/api-reference/get-users-id-tweets">User Tweets timeline by User ID Documentation</a>
     */
    @Get(uri="/2/users/{id}/tweets")
    @Consumes({"application/json", "application/problem+json"})
    Mono<Get2UsersIdTweetsResponse> usersIdTweets(
        @PathVariable(name="id") @NotNull @Pattern(regexp="^[0-9]{1,19}$") String id, 
        @QueryValue(value="since_id") @Nullable @Pattern(regexp="^[0-9]{1,19}$") String sinceId, 
        @QueryValue(value="until_id") @Nullable @Pattern(regexp="^[0-9]{1,19}$") String untilId, 
        @QueryValue(value="max_results") @Nullable @Min(5) @Max(100) Integer maxResults, 
        @QueryValue(value="pagination_token") @Nullable @Size(min=1) String paginationToken, 
        @QueryValue(value="exclude") @Nullable @Size(min=1) Set<String> exclude, 
        @QueryValue(value="start_time") @Nullable @Format("yyyy-MM-dd'T'HH:mm:ss.SSSXXXX") OffsetDateTime startTime, 
        @QueryValue(value="end_time") @Nullable @Format("yyyy-MM-dd'T'HH:mm:ss.SSSXXXX") OffsetDateTime endTime, 
        @QueryValue(value="tweet.fields") @Nullable @Size(min=1) Set<String> tweetFields, 
        @QueryValue(value="expansions") @Nullable @Size(min=1) Set<String> expansions, 
        @QueryValue(value="media.fields") @Nullable @Size(min=1) Set<String> mediaFields, 
        @QueryValue(value="poll.fields") @Nullable @Size(min=1) Set<String> pollFields, 
        @QueryValue(value="user.fields") @Nullable @Size(min=1) Set<String> userFields, 
        @QueryValue(value="place.fields") @Nullable @Size(min=1) Set<String> placeFields
    );

    /**
     * Causes the User (in the path) to unlike the specified Tweet
     * Causes the User (in the path) to unlike the specified Tweet. The User must match the User context authorizing the request
     *
     * @param id The ID of the authenticated source User that is requesting to unlike the Tweet. (required)
     * @param tweetId The ID of the Tweet that the User is requesting to unlike. (required)
     * @return UsersLikesDeleteResponse
     * 
     * @see <a href="https://developer.twitter.com/en/docs/twitter-api/tweets/likes/api-reference/delete-users-id-likes-tweet_id">Causes the User (in the path) to unlike the specified Tweet Documentation</a>
     */
    @Delete(uri="/2/users/{id}/likes/{tweet_id}")
    @Consumes({"application/json", "application/problem+json"})
    Mono<UsersLikesDeleteResponse> usersIdUnlike(
        @PathVariable(name="id") @NotNull String id, 
        @PathVariable(name="tweet_id") @NotNull @Pattern(regexp="^[0-9]{1,19}$") String tweetId
    );

    /**
     * Causes the User (in the path) to unretweet the specified Tweet
     * Causes the User (in the path) to unretweet the specified Tweet. The User must match the User context authorizing the request
     *
     * @param id The ID of the authenticated source User that is requesting to retweet the Tweet. (required)
     * @param sourceTweetId The ID of the Tweet that the User is requesting to unretweet. (required)
     * @return UsersRetweetsDeleteResponse
     * 
     * @see <a href="https://developer.twitter.com/en/docs/twitter-api/tweets/retweets/api-reference/delete-users-id-retweets-tweet_id">Causes the User (in the path) to unretweet the specified Tweet Documentation</a>
     */
    @Delete(uri="/2/users/{id}/retweets/{source_tweet_id}")
    @Consumes({"application/json", "application/problem+json"})
    Mono<UsersRetweetsDeleteResponse> usersIdUnretweets(
        @PathVariable(name="id") @NotNull String id, 
        @PathVariable(name="source_tweet_id") @NotNull @Pattern(regexp="^[0-9]{1,19}$") String sourceTweetId
    );

}

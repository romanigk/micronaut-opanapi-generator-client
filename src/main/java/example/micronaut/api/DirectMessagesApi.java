/*
 * Twitter API v2
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.55
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package example.micronaut.api;

import io.micronaut.http.annotation.*;
import io.micronaut.core.annotation.*;
import io.micronaut.http.client.annotation.Client;
import io.micronaut.core.convert.format.Format;
import reactor.core.publisher.Mono;
import example.micronaut.model.CreateDmConversationRequest;
import example.micronaut.model.CreateDmEventResponse;
import example.micronaut.model.CreateMessageRequest;
import example.micronaut.model.Error;
import example.micronaut.model.Get2DmConversationsIdDmEventsResponse;
import example.micronaut.model.Get2DmConversationsWithParticipantIdDmEventsResponse;
import example.micronaut.model.Get2DmEventsResponse;
import example.micronaut.model.Problem;
import java.util.Set;
import javax.annotation.Generated;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;
import javax.validation.constraints.*;

@Generated(value="org.openapitools.codegen.languages.JavaMicronautClientCodegen", date="2022-11-05T03:44:30.749524299+01:00[Europe/Berlin]")
@Client("${openapi-micronaut-client-base-path}")
public interface DirectMessagesApi {
    /**
     * Send a new message to a DM Conversation
     * Creates a new message for a DM Conversation specified by DM Conversation ID
     *
     * @param dmConversationId The DM Conversation ID. (required)
     * @param createMessageRequest  (optional)
     * @return CreateDmEventResponse
     */
    @Post(uri="/2/dm_conversations/{dm_conversation_id}/messages")
    @Consumes({"application/json", "application/problem+json"})
    @Produces({"application/json"})
    Mono<CreateDmEventResponse> dmConversationByIdEventIdCreate(
        @PathVariable(name="dm_conversation_id") @NotNull String dmConversationId, 
        @Body @Nullable @Valid CreateMessageRequest createMessageRequest
    );

    /**
     * Create a new DM Conversation
     * Creates a new DM Conversation.
     *
     * @param createDmConversationRequest  (optional)
     * @return CreateDmEventResponse
     */
    @Post(uri="/2/dm_conversations")
    @Consumes({"application/json", "application/problem+json"})
    @Produces({"application/json"})
    Mono<CreateDmEventResponse> dmConversationIdCreate(
        @Body @Nullable @Valid CreateDmConversationRequest createDmConversationRequest
    );

    /**
     * Send a new message to a user
     * Creates a new message for a DM Conversation with a participant user by ID
     *
     * @param participantId The ID of the recipient user that will receive the DM. (required)
     * @param createMessageRequest  (optional)
     * @return CreateDmEventResponse
     */
    @Post(uri="/2/dm_conversations/with/{participant_id}/messages")
    @Consumes({"application/json", "application/problem+json"})
    @Produces({"application/json"})
    Mono<CreateDmEventResponse> dmConversationWithUserEventIdCreate(
        @PathVariable(name="participant_id") @NotNull @Pattern(regexp="^[0-9]{1,19}$") String participantId, 
        @Body @Nullable @Valid CreateMessageRequest createMessageRequest
    );

    /**
     * Get DM Events for a DM Conversation
     * Returns DM Events for a DM Conversation
     *
     * @param id The DM Conversation ID. (required)
     * @param maxResults The maximum number of results. (optional, default to 100)
     * @param paginationToken This parameter is used to get a specified &#39;page&#39; of results. (optional)
     * @param eventTypes The set of event_types to include in the results. (optional, default to MessageCreate,ParticipantsLeave,ParticipantsJoin)
     * @param dmEventFields A comma separated list of DmEvent fields to display. (optional)
     * @param expansions A comma separated list of fields to expand. (optional)
     * @param mediaFields A comma separated list of Media fields to display. (optional)
     * @param userFields A comma separated list of User fields to display. (optional)
     * @param tweetFields A comma separated list of Tweet fields to display. (optional)
     * @return Get2DmConversationsIdDmEventsResponse
     */
    @Get(uri="/2/dm_conversations/{id}/dm_events")
    @Consumes({"application/json", "application/problem+json"})
    Mono<Get2DmConversationsIdDmEventsResponse> getDmConversationsIdDmEvents(
        @PathVariable(name="id") @NotNull @Pattern(regexp="^([0-9]{1,19}-[0-9]{1,19}|[0-9]{15,19})$") String id, 
        @QueryValue(value="max_results", defaultValue="100") @Nullable @Min(1) @Max(100) Integer maxResults, 
        @QueryValue(value="pagination_token") @Nullable @Size(min=16) String paginationToken, 
        @QueryValue(value="event_types", defaultValue="MessageCreate,ParticipantsLeave,ParticipantsJoin") @Nullable @Size(min=1) Set<String> eventTypes, 
        @QueryValue(value="dm_event.fields") @Nullable @Size(min=1) Set<String> dmEventFields, 
        @QueryValue(value="expansions") @Nullable @Size(min=1) Set<String> expansions, 
        @QueryValue(value="media.fields") @Nullable @Size(min=1) Set<String> mediaFields, 
        @QueryValue(value="user.fields") @Nullable @Size(min=1) Set<String> userFields, 
        @QueryValue(value="tweet.fields") @Nullable @Size(min=1) Set<String> tweetFields
    );

    /**
     * Get DM Events for a DM Conversation
     * Returns DM Events for a DM Conversation
     *
     * @param participantId The ID of the participant user for the One to One DM conversation. (required)
     * @param maxResults The maximum number of results. (optional, default to 100)
     * @param paginationToken This parameter is used to get a specified &#39;page&#39; of results. (optional)
     * @param eventTypes The set of event_types to include in the results. (optional, default to MessageCreate,ParticipantsLeave,ParticipantsJoin)
     * @param dmEventFields A comma separated list of DmEvent fields to display. (optional)
     * @param expansions A comma separated list of fields to expand. (optional)
     * @param mediaFields A comma separated list of Media fields to display. (optional)
     * @param userFields A comma separated list of User fields to display. (optional)
     * @param tweetFields A comma separated list of Tweet fields to display. (optional)
     * @return Get2DmConversationsWithParticipantIdDmEventsResponse
     */
    @Get(uri="/2/dm_conversations/with/{participant_id}/dm_events")
    @Consumes({"application/json", "application/problem+json"})
    Mono<Get2DmConversationsWithParticipantIdDmEventsResponse> getDmConversationsWithParticipantIdDmEvents(
        @PathVariable(name="participant_id") @NotNull @Pattern(regexp="^[0-9]{1,19}$") String participantId, 
        @QueryValue(value="max_results", defaultValue="100") @Nullable @Min(1) @Max(100) Integer maxResults, 
        @QueryValue(value="pagination_token") @Nullable @Size(min=16) String paginationToken, 
        @QueryValue(value="event_types", defaultValue="MessageCreate,ParticipantsLeave,ParticipantsJoin") @Nullable @Size(min=1) Set<String> eventTypes, 
        @QueryValue(value="dm_event.fields") @Nullable @Size(min=1) Set<String> dmEventFields, 
        @QueryValue(value="expansions") @Nullable @Size(min=1) Set<String> expansions, 
        @QueryValue(value="media.fields") @Nullable @Size(min=1) Set<String> mediaFields, 
        @QueryValue(value="user.fields") @Nullable @Size(min=1) Set<String> userFields, 
        @QueryValue(value="tweet.fields") @Nullable @Size(min=1) Set<String> tweetFields
    );

    /**
     * Get recent DM Events
     * Returns recent DM Events across DM conversations
     *
     * @param maxResults The maximum number of results. (optional, default to 100)
     * @param paginationToken This parameter is used to get a specified &#39;page&#39; of results. (optional)
     * @param eventTypes The set of event_types to include in the results. (optional, default to MessageCreate,ParticipantsLeave,ParticipantsJoin)
     * @param dmEventFields A comma separated list of DmEvent fields to display. (optional)
     * @param expansions A comma separated list of fields to expand. (optional)
     * @param mediaFields A comma separated list of Media fields to display. (optional)
     * @param userFields A comma separated list of User fields to display. (optional)
     * @param tweetFields A comma separated list of Tweet fields to display. (optional)
     * @return Get2DmEventsResponse
     */
    @Get(uri="/2/dm_events")
    @Consumes({"application/json", "application/problem+json"})
    Mono<Get2DmEventsResponse> getDmEvents(
        @QueryValue(value="max_results", defaultValue="100") @Nullable @Min(1) @Max(100) Integer maxResults, 
        @QueryValue(value="pagination_token") @Nullable @Size(min=16) String paginationToken, 
        @QueryValue(value="event_types", defaultValue="MessageCreate,ParticipantsLeave,ParticipantsJoin") @Nullable @Size(min=1) Set<String> eventTypes, 
        @QueryValue(value="dm_event.fields") @Nullable @Size(min=1) Set<String> dmEventFields, 
        @QueryValue(value="expansions") @Nullable @Size(min=1) Set<String> expansions, 
        @QueryValue(value="media.fields") @Nullable @Size(min=1) Set<String> mediaFields, 
        @QueryValue(value="user.fields") @Nullable @Size(min=1) Set<String> userFields, 
        @QueryValue(value="tweet.fields") @Nullable @Size(min=1) Set<String> tweetFields
    );

}
